// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListOpenTradesReader is a Reader for the ListOpenTrades structure.
type ListOpenTradesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOpenTradesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOpenTradesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListOpenTradesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListOpenTradesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListOpenTradesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOpenTradesOK creates a ListOpenTradesOK with default headers values
func NewListOpenTradesOK() *ListOpenTradesOK {
	return &ListOpenTradesOK{}
}

/*ListOpenTradesOK handles this case with default header values.

The Account's list of open Trades is provided
*/
type ListOpenTradesOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenTradesOKBody
}

func (o *ListOpenTradesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openTrades][%d] listOpenTradesOK  %+v", 200, o.Payload)
}

func (o *ListOpenTradesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenTradesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenTradesUnauthorized creates a ListOpenTradesUnauthorized with default headers values
func NewListOpenTradesUnauthorized() *ListOpenTradesUnauthorized {
	return &ListOpenTradesUnauthorized{}
}

/*ListOpenTradesUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListOpenTradesUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenTradesUnauthorizedBody
}

func (o *ListOpenTradesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openTrades][%d] listOpenTradesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOpenTradesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenTradesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenTradesNotFound creates a ListOpenTradesNotFound with default headers values
func NewListOpenTradesNotFound() *ListOpenTradesNotFound {
	return &ListOpenTradesNotFound{}
}

/*ListOpenTradesNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListOpenTradesNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenTradesNotFoundBody
}

func (o *ListOpenTradesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openTrades][%d] listOpenTradesNotFound  %+v", 404, o.Payload)
}

func (o *ListOpenTradesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenTradesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenTradesMethodNotAllowed creates a ListOpenTradesMethodNotAllowed with default headers values
func NewListOpenTradesMethodNotAllowed() *ListOpenTradesMethodNotAllowed {
	return &ListOpenTradesMethodNotAllowed{}
}

/*ListOpenTradesMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListOpenTradesMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenTradesMethodNotAllowedBody
}

func (o *ListOpenTradesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openTrades][%d] listOpenTradesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListOpenTradesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenTradesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
