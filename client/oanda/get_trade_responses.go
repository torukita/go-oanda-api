// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetTradeReader is a Reader for the GetTrade structure.
type GetTradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTradeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTradeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTradeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTradeOK creates a GetTradeOK with default headers values
func NewGetTradeOK() *GetTradeOK {
	return &GetTradeOK{}
}

/*GetTradeOK handles this case with default header values.

The details for the requested Trade is provided
*/
type GetTradeOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTradeOKBody
}

func (o *GetTradeOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeOK  %+v", 200, o.Payload)
}

func (o *GetTradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTradeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeUnauthorized creates a GetTradeUnauthorized with default headers values
func NewGetTradeUnauthorized() *GetTradeUnauthorized {
	return &GetTradeUnauthorized{}
}

/*GetTradeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTradeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTradeUnauthorizedBody
}

func (o *GetTradeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTradeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTradeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeNotFound creates a GetTradeNotFound with default headers values
func NewGetTradeNotFound() *GetTradeNotFound {
	return &GetTradeNotFound{}
}

/*GetTradeNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTradeNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTradeNotFoundBody
}

func (o *GetTradeNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeNotFound  %+v", 404, o.Payload)
}

func (o *GetTradeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTradeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeMethodNotAllowed creates a GetTradeMethodNotAllowed with default headers values
func NewGetTradeMethodNotAllowed() *GetTradeMethodNotAllowed {
	return &GetTradeMethodNotAllowed{}
}

/*GetTradeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTradeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTradeMethodNotAllowedBody
}

func (o *GetTradeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTradeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTradeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
