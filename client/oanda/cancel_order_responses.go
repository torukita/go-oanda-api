// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// CancelOrderReader is a Reader for the CancelOrder structure.
type CancelOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCancelOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCancelOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCancelOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCancelOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCancelOrderOK creates a CancelOrderOK with default headers values
func NewCancelOrderOK() *CancelOrderOK {
	return &CancelOrderOK{}
}

/*CancelOrderOK handles this case with default header values.

The Order was cancelled as specified
*/
type CancelOrderOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CancelOrderOKBody
}

func (o *CancelOrderOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderOK  %+v", 200, o.Payload)
}

func (o *CancelOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CancelOrderOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderUnauthorized creates a CancelOrderUnauthorized with default headers values
func NewCancelOrderUnauthorized() *CancelOrderUnauthorized {
	return &CancelOrderUnauthorized{}
}

/*CancelOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type CancelOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CancelOrderUnauthorizedBody
}

func (o *CancelOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CancelOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderNotFound creates a CancelOrderNotFound with default headers values
func NewCancelOrderNotFound() *CancelOrderNotFound {
	return &CancelOrderNotFound{}
}

/*CancelOrderNotFound handles this case with default header values.

The Account or Order specified does not exist.
*/
type CancelOrderNotFound struct {
	Payload *models.CancelOrderNotFoundBody
}

func (o *CancelOrderNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderNotFound  %+v", 404, o.Payload)
}

func (o *CancelOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CancelOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderMethodNotAllowed creates a CancelOrderMethodNotAllowed with default headers values
func NewCancelOrderMethodNotAllowed() *CancelOrderMethodNotAllowed {
	return &CancelOrderMethodNotAllowed{}
}

/*CancelOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type CancelOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CancelOrderMethodNotAllowedBody
}

func (o *CancelOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CancelOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CancelOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
