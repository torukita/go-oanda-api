// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListTransactionsReader is a Reader for the ListTransactions structure.
type ListTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListTransactionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListTransactionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListTransactionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewListTransactionsRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListTransactionsOK creates a ListTransactionsOK with default headers values
func NewListTransactionsOK() *ListTransactionsOK {
	return &ListTransactionsOK{}
}

/*ListTransactionsOK handles this case with default header values.

The requested time range of Transaction pages are provided.
*/
type ListTransactionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsOKBody
}

func (o *ListTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsOK  %+v", 200, o.Payload)
}

func (o *ListTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsBadRequest creates a ListTransactionsBadRequest with default headers values
func NewListTransactionsBadRequest() *ListTransactionsBadRequest {
	return &ListTransactionsBadRequest{}
}

/*ListTransactionsBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type ListTransactionsBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsBadRequestBody
}

func (o *ListTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsUnauthorized creates a ListTransactionsUnauthorized with default headers values
func NewListTransactionsUnauthorized() *ListTransactionsUnauthorized {
	return &ListTransactionsUnauthorized{}
}

/*ListTransactionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListTransactionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsUnauthorizedBody
}

func (o *ListTransactionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTransactionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsForbidden creates a ListTransactionsForbidden with default headers values
func NewListTransactionsForbidden() *ListTransactionsForbidden {
	return &ListTransactionsForbidden{}
}

/*ListTransactionsForbidden handles this case with default header values.

Forbidden. The client has provided a token that does not authorize them to perform the action implemented by teh API endpoint.
*/
type ListTransactionsForbidden struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsForbiddenBody
}

func (o *ListTransactionsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsForbidden  %+v", 403, o.Payload)
}

func (o *ListTransactionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsNotFound creates a ListTransactionsNotFound with default headers values
func NewListTransactionsNotFound() *ListTransactionsNotFound {
	return &ListTransactionsNotFound{}
}

/*ListTransactionsNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListTransactionsNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsNotFoundBody
}

func (o *ListTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *ListTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsMethodNotAllowed creates a ListTransactionsMethodNotAllowed with default headers values
func NewListTransactionsMethodNotAllowed() *ListTransactionsMethodNotAllowed {
	return &ListTransactionsMethodNotAllowed{}
}

/*ListTransactionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListTransactionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsMethodNotAllowedBody
}

func (o *ListTransactionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListTransactionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsRequestRangeNotSatisfiable creates a ListTransactionsRequestRangeNotSatisfiable with default headers values
func NewListTransactionsRequestRangeNotSatisfiable() *ListTransactionsRequestRangeNotSatisfiable {
	return &ListTransactionsRequestRangeNotSatisfiable{}
}

/*ListTransactionsRequestRangeNotSatisfiable handles this case with default header values.

Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.
*/
type ListTransactionsRequestRangeNotSatisfiable struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTransactionsRequestedRangeNotSatisfiableBody
}

func (o *ListTransactionsRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions][%d] listTransactionsRequestRangeNotSatisfiable  %+v", 416, o.Payload)
}

func (o *ListTransactionsRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTransactionsRequestedRangeNotSatisfiableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
