// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstrumentsInstrumentPositionBookParams creates a new GetInstrumentsInstrumentPositionBookParams object
// with the default values initialized.
func NewGetInstrumentsInstrumentPositionBookParams() *GetInstrumentsInstrumentPositionBookParams {
	var ()
	return &GetInstrumentsInstrumentPositionBookParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstrumentsInstrumentPositionBookParamsWithTimeout creates a new GetInstrumentsInstrumentPositionBookParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstrumentsInstrumentPositionBookParamsWithTimeout(timeout time.Duration) *GetInstrumentsInstrumentPositionBookParams {
	var ()
	return &GetInstrumentsInstrumentPositionBookParams{

		timeout: timeout,
	}
}

// NewGetInstrumentsInstrumentPositionBookParamsWithContext creates a new GetInstrumentsInstrumentPositionBookParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstrumentsInstrumentPositionBookParamsWithContext(ctx context.Context) *GetInstrumentsInstrumentPositionBookParams {
	var ()
	return &GetInstrumentsInstrumentPositionBookParams{

		Context: ctx,
	}
}

// NewGetInstrumentsInstrumentPositionBookParamsWithHTTPClient creates a new GetInstrumentsInstrumentPositionBookParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstrumentsInstrumentPositionBookParamsWithHTTPClient(client *http.Client) *GetInstrumentsInstrumentPositionBookParams {
	var ()
	return &GetInstrumentsInstrumentPositionBookParams{
		HTTPClient: client,
	}
}

/*GetInstrumentsInstrumentPositionBookParams contains all the parameters to send to the API endpoint
for the get instruments instrument position book operation typically these are written to a http.Request
*/
type GetInstrumentsInstrumentPositionBookParams struct {

	/*AcceptDatetimeFormat
	  Format of DateTime fields in the request and response.

	*/
	AcceptDatetimeFormat *string
	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*Instrument
	  Name of the Instrument

	*/
	Instrument string
	/*Time
	  The time of the snapshot to fetch. If not specified, then the most recent snapshot is fetched.

	*/
	Time *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithTimeout(timeout time.Duration) *GetInstrumentsInstrumentPositionBookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithContext(ctx context.Context) *GetInstrumentsInstrumentPositionBookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithHTTPClient(client *http.Client) *GetInstrumentsInstrumentPositionBookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithAcceptDatetimeFormat(acceptDatetimeFormat *string) *GetInstrumentsInstrumentPositionBookParams {
	o.SetAcceptDatetimeFormat(acceptDatetimeFormat)
	return o
}

// SetAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetAcceptDatetimeFormat(acceptDatetimeFormat *string) {
	o.AcceptDatetimeFormat = acceptDatetimeFormat
}

// WithAuthorization adds the authorization to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithAuthorization(authorization string) *GetInstrumentsInstrumentPositionBookParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithInstrument adds the instrument to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithInstrument(instrument string) *GetInstrumentsInstrumentPositionBookParams {
	o.SetInstrument(instrument)
	return o
}

// SetInstrument adds the instrument to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetInstrument(instrument string) {
	o.Instrument = instrument
}

// WithTime adds the time to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) WithTime(time *string) *GetInstrumentsInstrumentPositionBookParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the get instruments instrument position book params
func (o *GetInstrumentsInstrumentPositionBookParams) SetTime(time *string) {
	o.Time = time
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstrumentsInstrumentPositionBookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptDatetimeFormat != nil {

		// header param Accept-Datetime-Format
		if err := r.SetHeaderParam("Accept-Datetime-Format", *o.AcceptDatetimeFormat); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param instrument
	if err := r.SetPathParam("instrument", o.Instrument); err != nil {
		return err
	}

	if o.Time != nil {

		// query param time
		var qrTime string
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := qrTime
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
