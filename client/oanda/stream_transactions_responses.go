// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// StreamTransactionsReader is a Reader for the StreamTransactions structure.
type StreamTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StreamTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStreamTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewStreamTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewStreamTransactionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStreamTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewStreamTransactionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStreamTransactionsOK creates a StreamTransactionsOK with default headers values
func NewStreamTransactionsOK() *StreamTransactionsOK {
	return &StreamTransactionsOK{}
}

/*StreamTransactionsOK handles this case with default header values.

Connecting to the Transaction Stream was successful.
*/
type StreamTransactionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.StreamTransactionsOKBody
}

func (o *StreamTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsOK  %+v", 200, o.Payload)
}

func (o *StreamTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.StreamTransactionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsBadRequest creates a StreamTransactionsBadRequest with default headers values
func NewStreamTransactionsBadRequest() *StreamTransactionsBadRequest {
	return &StreamTransactionsBadRequest{}
}

/*StreamTransactionsBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type StreamTransactionsBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.StreamTransactionsBadRequestBody
}

func (o *StreamTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *StreamTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.StreamTransactionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsUnauthorized creates a StreamTransactionsUnauthorized with default headers values
func NewStreamTransactionsUnauthorized() *StreamTransactionsUnauthorized {
	return &StreamTransactionsUnauthorized{}
}

/*StreamTransactionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type StreamTransactionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.StreamTransactionsUnauthorizedBody
}

func (o *StreamTransactionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsUnauthorized  %+v", 401, o.Payload)
}

func (o *StreamTransactionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.StreamTransactionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsNotFound creates a StreamTransactionsNotFound with default headers values
func NewStreamTransactionsNotFound() *StreamTransactionsNotFound {
	return &StreamTransactionsNotFound{}
}

/*StreamTransactionsNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type StreamTransactionsNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.StreamTransactionsNotFoundBody
}

func (o *StreamTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *StreamTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.StreamTransactionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsMethodNotAllowed creates a StreamTransactionsMethodNotAllowed with default headers values
func NewStreamTransactionsMethodNotAllowed() *StreamTransactionsMethodNotAllowed {
	return &StreamTransactionsMethodNotAllowed{}
}

/*StreamTransactionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type StreamTransactionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.StreamTransactionsMethodNotAllowedBody
}

func (o *StreamTransactionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *StreamTransactionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.StreamTransactionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
