// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetExternalUserInfoReader is a Reader for the GetExternalUserInfo structure.
type GetExternalUserInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExternalUserInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExternalUserInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetExternalUserInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetExternalUserInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetExternalUserInfoMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExternalUserInfoOK creates a GetExternalUserInfoOK with default headers values
func NewGetExternalUserInfoOK() *GetExternalUserInfoOK {
	return &GetExternalUserInfoOK{}
}

/*GetExternalUserInfoOK handles this case with default header values.

The external user information has been provided
*/
type GetExternalUserInfoOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetExternalUserInfoOKBody
}

func (o *GetExternalUserInfoOK) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}/externalInfo][%d] getExternalUserInfoOK  %+v", 200, o.Payload)
}

func (o *GetExternalUserInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetExternalUserInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalUserInfoUnauthorized creates a GetExternalUserInfoUnauthorized with default headers values
func NewGetExternalUserInfoUnauthorized() *GetExternalUserInfoUnauthorized {
	return &GetExternalUserInfoUnauthorized{}
}

/*GetExternalUserInfoUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetExternalUserInfoUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetExternalUserInfoUnauthorizedBody
}

func (o *GetExternalUserInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}/externalInfo][%d] getExternalUserInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExternalUserInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetExternalUserInfoUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalUserInfoForbidden creates a GetExternalUserInfoForbidden with default headers values
func NewGetExternalUserInfoForbidden() *GetExternalUserInfoForbidden {
	return &GetExternalUserInfoForbidden{}
}

/*GetExternalUserInfoForbidden handles this case with default header values.

Forbidden. The client has provided a token that does not authorize them to perform the action implemented by teh API endpoint.
*/
type GetExternalUserInfoForbidden struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetExternalUserInfoForbiddenBody
}

func (o *GetExternalUserInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}/externalInfo][%d] getExternalUserInfoForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalUserInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetExternalUserInfoForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalUserInfoMethodNotAllowed creates a GetExternalUserInfoMethodNotAllowed with default headers values
func NewGetExternalUserInfoMethodNotAllowed() *GetExternalUserInfoMethodNotAllowed {
	return &GetExternalUserInfoMethodNotAllowed{}
}

/*GetExternalUserInfoMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetExternalUserInfoMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetExternalUserInfoMethodNotAllowedBody
}

func (o *GetExternalUserInfoMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}/externalInfo][%d] getExternalUserInfoMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetExternalUserInfoMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetExternalUserInfoMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
