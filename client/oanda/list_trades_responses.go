// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListTradesReader is a Reader for the ListTrades structure.
type ListTradesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTradesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListTradesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListTradesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListTradesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListTradesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListTradesOK creates a ListTradesOK with default headers values
func NewListTradesOK() *ListTradesOK {
	return &ListTradesOK{}
}

/*ListTradesOK handles this case with default header values.

The list of Trades requested
*/
type ListTradesOK struct {
	/*A link to the next page of Trades if the results were paginated
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTradesOKBody
}

func (o *ListTradesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesOK  %+v", 200, o.Payload)
}

func (o *ListTradesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTradesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesUnauthorized creates a ListTradesUnauthorized with default headers values
func NewListTradesUnauthorized() *ListTradesUnauthorized {
	return &ListTradesUnauthorized{}
}

/*ListTradesUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListTradesUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTradesUnauthorizedBody
}

func (o *ListTradesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTradesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTradesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesNotFound creates a ListTradesNotFound with default headers values
func NewListTradesNotFound() *ListTradesNotFound {
	return &ListTradesNotFound{}
}

/*ListTradesNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListTradesNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTradesNotFoundBody
}

func (o *ListTradesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesNotFound  %+v", 404, o.Payload)
}

func (o *ListTradesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTradesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesMethodNotAllowed creates a ListTradesMethodNotAllowed with default headers values
func NewListTradesMethodNotAllowed() *ListTradesMethodNotAllowed {
	return &ListTradesMethodNotAllowed{}
}

/*ListTradesMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListTradesMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListTradesMethodNotAllowedBody
}

func (o *ListTradesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListTradesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListTradesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
