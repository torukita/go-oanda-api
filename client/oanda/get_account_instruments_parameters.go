// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountInstrumentsParams creates a new GetAccountInstrumentsParams object
// with the default values initialized.
func NewGetAccountInstrumentsParams() *GetAccountInstrumentsParams {
	var ()
	return &GetAccountInstrumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountInstrumentsParamsWithTimeout creates a new GetAccountInstrumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountInstrumentsParamsWithTimeout(timeout time.Duration) *GetAccountInstrumentsParams {
	var ()
	return &GetAccountInstrumentsParams{

		timeout: timeout,
	}
}

// NewGetAccountInstrumentsParamsWithContext creates a new GetAccountInstrumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountInstrumentsParamsWithContext(ctx context.Context) *GetAccountInstrumentsParams {
	var ()
	return &GetAccountInstrumentsParams{

		Context: ctx,
	}
}

// NewGetAccountInstrumentsParamsWithHTTPClient creates a new GetAccountInstrumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountInstrumentsParamsWithHTTPClient(client *http.Client) *GetAccountInstrumentsParams {
	var ()
	return &GetAccountInstrumentsParams{
		HTTPClient: client,
	}
}

/*GetAccountInstrumentsParams contains all the parameters to send to the API endpoint
for the get account instruments operation typically these are written to a http.Request
*/
type GetAccountInstrumentsParams struct {

	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*AccountID
	  Account Identifier

	*/
	AccountID string
	/*Instruments
	  List of instruments to query specifically.

	*/
	Instruments []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get account instruments params
func (o *GetAccountInstrumentsParams) WithTimeout(timeout time.Duration) *GetAccountInstrumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get account instruments params
func (o *GetAccountInstrumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get account instruments params
func (o *GetAccountInstrumentsParams) WithContext(ctx context.Context) *GetAccountInstrumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get account instruments params
func (o *GetAccountInstrumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get account instruments params
func (o *GetAccountInstrumentsParams) WithHTTPClient(client *http.Client) *GetAccountInstrumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get account instruments params
func (o *GetAccountInstrumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get account instruments params
func (o *GetAccountInstrumentsParams) WithAuthorization(authorization string) *GetAccountInstrumentsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get account instruments params
func (o *GetAccountInstrumentsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccountID adds the accountID to the get account instruments params
func (o *GetAccountInstrumentsParams) WithAccountID(accountID string) *GetAccountInstrumentsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get account instruments params
func (o *GetAccountInstrumentsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithInstruments adds the instruments to the get account instruments params
func (o *GetAccountInstrumentsParams) WithInstruments(instruments []string) *GetAccountInstrumentsParams {
	o.SetInstruments(instruments)
	return o
}

// SetInstruments adds the instruments to the get account instruments params
func (o *GetAccountInstrumentsParams) SetInstruments(instruments []string) {
	o.Instruments = instruments
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountInstrumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param accountID
	if err := r.SetPathParam("accountID", o.AccountID); err != nil {
		return err
	}

	valuesInstruments := o.Instruments

	joinedInstruments := swag.JoinByFormat(valuesInstruments, "csv")
	// query array param instruments
	if err := r.SetQueryParam("instruments", joinedInstruments...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
