// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTradeParams creates a new GetTradeParams object
// with the default values initialized.
func NewGetTradeParams() *GetTradeParams {
	var ()
	return &GetTradeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTradeParamsWithTimeout creates a new GetTradeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTradeParamsWithTimeout(timeout time.Duration) *GetTradeParams {
	var ()
	return &GetTradeParams{

		timeout: timeout,
	}
}

// NewGetTradeParamsWithContext creates a new GetTradeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTradeParamsWithContext(ctx context.Context) *GetTradeParams {
	var ()
	return &GetTradeParams{

		Context: ctx,
	}
}

// NewGetTradeParamsWithHTTPClient creates a new GetTradeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTradeParamsWithHTTPClient(client *http.Client) *GetTradeParams {
	var ()
	return &GetTradeParams{
		HTTPClient: client,
	}
}

/*GetTradeParams contains all the parameters to send to the API endpoint
for the get trade operation typically these are written to a http.Request
*/
type GetTradeParams struct {

	/*AcceptDatetimeFormat
	  Format of DateTime fields in the request and response.

	*/
	AcceptDatetimeFormat *string
	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*AccountID
	  Account Identifier

	*/
	AccountID string
	/*TradeSpecifier
	  Specifier for the Trade

	*/
	TradeSpecifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get trade params
func (o *GetTradeParams) WithTimeout(timeout time.Duration) *GetTradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get trade params
func (o *GetTradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get trade params
func (o *GetTradeParams) WithContext(ctx context.Context) *GetTradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get trade params
func (o *GetTradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get trade params
func (o *GetTradeParams) WithHTTPClient(client *http.Client) *GetTradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get trade params
func (o *GetTradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptDatetimeFormat adds the acceptDatetimeFormat to the get trade params
func (o *GetTradeParams) WithAcceptDatetimeFormat(acceptDatetimeFormat *string) *GetTradeParams {
	o.SetAcceptDatetimeFormat(acceptDatetimeFormat)
	return o
}

// SetAcceptDatetimeFormat adds the acceptDatetimeFormat to the get trade params
func (o *GetTradeParams) SetAcceptDatetimeFormat(acceptDatetimeFormat *string) {
	o.AcceptDatetimeFormat = acceptDatetimeFormat
}

// WithAuthorization adds the authorization to the get trade params
func (o *GetTradeParams) WithAuthorization(authorization string) *GetTradeParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get trade params
func (o *GetTradeParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccountID adds the accountID to the get trade params
func (o *GetTradeParams) WithAccountID(accountID string) *GetTradeParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get trade params
func (o *GetTradeParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithTradeSpecifier adds the tradeSpecifier to the get trade params
func (o *GetTradeParams) WithTradeSpecifier(tradeSpecifier string) *GetTradeParams {
	o.SetTradeSpecifier(tradeSpecifier)
	return o
}

// SetTradeSpecifier adds the tradeSpecifier to the get trade params
func (o *GetTradeParams) SetTradeSpecifier(tradeSpecifier string) {
	o.TradeSpecifier = tradeSpecifier
}

// WriteToRequest writes these params to a swagger request
func (o *GetTradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptDatetimeFormat != nil {

		// header param Accept-Datetime-Format
		if err := r.SetHeaderParam("Accept-Datetime-Format", *o.AcceptDatetimeFormat); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param accountID
	if err := r.SetPathParam("accountID", o.AccountID); err != nil {
		return err
	}

	// path param tradeSpecifier
	if err := r.SetPathParam("tradeSpecifier", o.TradeSpecifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
