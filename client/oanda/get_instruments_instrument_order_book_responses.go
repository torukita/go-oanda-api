// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetInstrumentsInstrumentOrderBookReader is a Reader for the GetInstrumentsInstrumentOrderBook structure.
type GetInstrumentsInstrumentOrderBookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentsInstrumentOrderBookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstrumentsInstrumentOrderBookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstrumentsInstrumentOrderBookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstrumentsInstrumentOrderBookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstrumentsInstrumentOrderBookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstrumentsInstrumentOrderBookMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstrumentsInstrumentOrderBookOK creates a GetInstrumentsInstrumentOrderBookOK with default headers values
func NewGetInstrumentsInstrumentOrderBookOK() *GetInstrumentsInstrumentOrderBookOK {
	return &GetInstrumentsInstrumentOrderBookOK{}
}

/*GetInstrumentsInstrumentOrderBookOK handles this case with default header values.

The order book has been successfully provided.
*/
type GetInstrumentsInstrumentOrderBookOK struct {
	/*A link to the next/previous order book snapshot.
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentOrderBookOKBody
}

func (o *GetInstrumentsInstrumentOrderBookOK) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/orderBook][%d] getInstrumentsInstrumentOrderBookOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentsInstrumentOrderBookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentOrderBookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentOrderBookBadRequest creates a GetInstrumentsInstrumentOrderBookBadRequest with default headers values
func NewGetInstrumentsInstrumentOrderBookBadRequest() *GetInstrumentsInstrumentOrderBookBadRequest {
	return &GetInstrumentsInstrumentOrderBookBadRequest{}
}

/*GetInstrumentsInstrumentOrderBookBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetInstrumentsInstrumentOrderBookBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentOrderBookBadRequestBody
}

func (o *GetInstrumentsInstrumentOrderBookBadRequest) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/orderBook][%d] getInstrumentsInstrumentOrderBookBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentsInstrumentOrderBookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentOrderBookBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentOrderBookUnauthorized creates a GetInstrumentsInstrumentOrderBookUnauthorized with default headers values
func NewGetInstrumentsInstrumentOrderBookUnauthorized() *GetInstrumentsInstrumentOrderBookUnauthorized {
	return &GetInstrumentsInstrumentOrderBookUnauthorized{}
}

/*GetInstrumentsInstrumentOrderBookUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetInstrumentsInstrumentOrderBookUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentOrderBookUnauthorizedBody
}

func (o *GetInstrumentsInstrumentOrderBookUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/orderBook][%d] getInstrumentsInstrumentOrderBookUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstrumentsInstrumentOrderBookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentOrderBookUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentOrderBookNotFound creates a GetInstrumentsInstrumentOrderBookNotFound with default headers values
func NewGetInstrumentsInstrumentOrderBookNotFound() *GetInstrumentsInstrumentOrderBookNotFound {
	return &GetInstrumentsInstrumentOrderBookNotFound{}
}

/*GetInstrumentsInstrumentOrderBookNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetInstrumentsInstrumentOrderBookNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentOrderBookNotFoundBody
}

func (o *GetInstrumentsInstrumentOrderBookNotFound) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/orderBook][%d] getInstrumentsInstrumentOrderBookNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentsInstrumentOrderBookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentOrderBookNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentOrderBookMethodNotAllowed creates a GetInstrumentsInstrumentOrderBookMethodNotAllowed with default headers values
func NewGetInstrumentsInstrumentOrderBookMethodNotAllowed() *GetInstrumentsInstrumentOrderBookMethodNotAllowed {
	return &GetInstrumentsInstrumentOrderBookMethodNotAllowed{}
}

/*GetInstrumentsInstrumentOrderBookMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetInstrumentsInstrumentOrderBookMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentOrderBookMethodNotAllowedBody
}

func (o *GetInstrumentsInstrumentOrderBookMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/orderBook][%d] getInstrumentsInstrumentOrderBookMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInstrumentsInstrumentOrderBookMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentOrderBookMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
