// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPricesParams creates a new GetPricesParams object
// with the default values initialized.
func NewGetPricesParams() *GetPricesParams {
	var ()
	return &GetPricesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPricesParamsWithTimeout creates a new GetPricesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPricesParamsWithTimeout(timeout time.Duration) *GetPricesParams {
	var ()
	return &GetPricesParams{

		timeout: timeout,
	}
}

// NewGetPricesParamsWithContext creates a new GetPricesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPricesParamsWithContext(ctx context.Context) *GetPricesParams {
	var ()
	return &GetPricesParams{

		Context: ctx,
	}
}

// NewGetPricesParamsWithHTTPClient creates a new GetPricesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPricesParamsWithHTTPClient(client *http.Client) *GetPricesParams {
	var ()
	return &GetPricesParams{
		HTTPClient: client,
	}
}

/*GetPricesParams contains all the parameters to send to the API endpoint
for the get prices operation typically these are written to a http.Request
*/
type GetPricesParams struct {

	/*AcceptDatetimeFormat
	  Format of DateTime fields in the request and response.

	*/
	AcceptDatetimeFormat *string
	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*AccountID
	  Account Identifier

	*/
	AccountID string
	/*IncludeUnitsAvailable
	  Flag that enables the inclusion of the unitsAvailable field in the returned Price objects.

	*/
	IncludeUnitsAvailable *bool
	/*Instruments
	  List of Instruments to get pricing for.

	*/
	Instruments []string
	/*Since
	  Date/Time filter to apply to the returned prices. Only prices with a time later than this filter will be provided.

	*/
	Since *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get prices params
func (o *GetPricesParams) WithTimeout(timeout time.Duration) *GetPricesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get prices params
func (o *GetPricesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get prices params
func (o *GetPricesParams) WithContext(ctx context.Context) *GetPricesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get prices params
func (o *GetPricesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get prices params
func (o *GetPricesParams) WithHTTPClient(client *http.Client) *GetPricesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get prices params
func (o *GetPricesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptDatetimeFormat adds the acceptDatetimeFormat to the get prices params
func (o *GetPricesParams) WithAcceptDatetimeFormat(acceptDatetimeFormat *string) *GetPricesParams {
	o.SetAcceptDatetimeFormat(acceptDatetimeFormat)
	return o
}

// SetAcceptDatetimeFormat adds the acceptDatetimeFormat to the get prices params
func (o *GetPricesParams) SetAcceptDatetimeFormat(acceptDatetimeFormat *string) {
	o.AcceptDatetimeFormat = acceptDatetimeFormat
}

// WithAuthorization adds the authorization to the get prices params
func (o *GetPricesParams) WithAuthorization(authorization string) *GetPricesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get prices params
func (o *GetPricesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccountID adds the accountID to the get prices params
func (o *GetPricesParams) WithAccountID(accountID string) *GetPricesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get prices params
func (o *GetPricesParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithIncludeUnitsAvailable adds the includeUnitsAvailable to the get prices params
func (o *GetPricesParams) WithIncludeUnitsAvailable(includeUnitsAvailable *bool) *GetPricesParams {
	o.SetIncludeUnitsAvailable(includeUnitsAvailable)
	return o
}

// SetIncludeUnitsAvailable adds the includeUnitsAvailable to the get prices params
func (o *GetPricesParams) SetIncludeUnitsAvailable(includeUnitsAvailable *bool) {
	o.IncludeUnitsAvailable = includeUnitsAvailable
}

// WithInstruments adds the instruments to the get prices params
func (o *GetPricesParams) WithInstruments(instruments []string) *GetPricesParams {
	o.SetInstruments(instruments)
	return o
}

// SetInstruments adds the instruments to the get prices params
func (o *GetPricesParams) SetInstruments(instruments []string) {
	o.Instruments = instruments
}

// WithSince adds the since to the get prices params
func (o *GetPricesParams) WithSince(since *string) *GetPricesParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get prices params
func (o *GetPricesParams) SetSince(since *string) {
	o.Since = since
}

// WriteToRequest writes these params to a swagger request
func (o *GetPricesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptDatetimeFormat != nil {

		// header param Accept-Datetime-Format
		if err := r.SetHeaderParam("Accept-Datetime-Format", *o.AcceptDatetimeFormat); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param accountID
	if err := r.SetPathParam("accountID", o.AccountID); err != nil {
		return err
	}

	if o.IncludeUnitsAvailable != nil {

		// query param includeUnitsAvailable
		var qrIncludeUnitsAvailable bool
		if o.IncludeUnitsAvailable != nil {
			qrIncludeUnitsAvailable = *o.IncludeUnitsAvailable
		}
		qIncludeUnitsAvailable := swag.FormatBool(qrIncludeUnitsAvailable)
		if qIncludeUnitsAvailable != "" {
			if err := r.SetQueryParam("includeUnitsAvailable", qIncludeUnitsAvailable); err != nil {
				return err
			}
		}

	}

	valuesInstruments := o.Instruments

	joinedInstruments := swag.JoinByFormat(valuesInstruments, "csv")
	// query array param instruments
	if err := r.SetQueryParam("instruments", joinedInstruments...); err != nil {
		return err
	}

	if o.Since != nil {

		// query param since
		var qrSince string
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
