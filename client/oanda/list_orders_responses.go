// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListOrdersReader is a Reader for the ListOrders structure.
type ListOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListOrdersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOrdersOK creates a ListOrdersOK with default headers values
func NewListOrdersOK() *ListOrdersOK {
	return &ListOrdersOK{}
}

/*ListOrdersOK handles this case with default header values.

The list of Orders requested
*/
type ListOrdersOK struct {
	/*A link to the next page of results if the results were paginated
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOrdersOKBody
}

func (o *ListOrdersOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders][%d] listOrdersOK  %+v", 200, o.Payload)
}

func (o *ListOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOrdersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOrdersBadRequest creates a ListOrdersBadRequest with default headers values
func NewListOrdersBadRequest() *ListOrdersBadRequest {
	return &ListOrdersBadRequest{}
}

/*ListOrdersBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type ListOrdersBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOrdersBadRequestBody
}

func (o *ListOrdersBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders][%d] listOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *ListOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOrdersBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOrdersNotFound creates a ListOrdersNotFound with default headers values
func NewListOrdersNotFound() *ListOrdersNotFound {
	return &ListOrdersNotFound{}
}

/*ListOrdersNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListOrdersNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOrdersNotFoundBody
}

func (o *ListOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders][%d] listOrdersNotFound  %+v", 404, o.Payload)
}

func (o *ListOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOrdersNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOrdersMethodNotAllowed creates a ListOrdersMethodNotAllowed with default headers values
func NewListOrdersMethodNotAllowed() *ListOrdersMethodNotAllowed {
	return &ListOrdersMethodNotAllowed{}
}

/*ListOrdersMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListOrdersMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOrdersMethodNotAllowedBody
}

func (o *ListOrdersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders][%d] listOrdersMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListOrdersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOrdersMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
