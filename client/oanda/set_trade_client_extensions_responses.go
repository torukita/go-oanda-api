// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// SetTradeClientExtensionsReader is a Reader for the SetTradeClientExtensions structure.
type SetTradeClientExtensionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTradeClientExtensionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetTradeClientExtensionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetTradeClientExtensionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSetTradeClientExtensionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSetTradeClientExtensionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSetTradeClientExtensionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetTradeClientExtensionsOK creates a SetTradeClientExtensionsOK with default headers values
func NewSetTradeClientExtensionsOK() *SetTradeClientExtensionsOK {
	return &SetTradeClientExtensionsOK{}
}

/*SetTradeClientExtensionsOK handles this case with default header values.

The Trade's Client Extensions have been updated as requested.
*/
type SetTradeClientExtensionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeClientExtensionsOKBody
}

func (o *SetTradeClientExtensionsOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsOK  %+v", 200, o.Payload)
}

func (o *SetTradeClientExtensionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeClientExtensionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsBadRequest creates a SetTradeClientExtensionsBadRequest with default headers values
func NewSetTradeClientExtensionsBadRequest() *SetTradeClientExtensionsBadRequest {
	return &SetTradeClientExtensionsBadRequest{}
}

/*SetTradeClientExtensionsBadRequest handles this case with default header values.

The Trade's Client Extensions cannot be modified as requested.
*/
type SetTradeClientExtensionsBadRequest struct {
	Payload *models.SetTradeClientExtensionsBadRequestBody
}

func (o *SetTradeClientExtensionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsBadRequest  %+v", 400, o.Payload)
}

func (o *SetTradeClientExtensionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SetTradeClientExtensionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsUnauthorized creates a SetTradeClientExtensionsUnauthorized with default headers values
func NewSetTradeClientExtensionsUnauthorized() *SetTradeClientExtensionsUnauthorized {
	return &SetTradeClientExtensionsUnauthorized{}
}

/*SetTradeClientExtensionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type SetTradeClientExtensionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeClientExtensionsUnauthorizedBody
}

func (o *SetTradeClientExtensionsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTradeClientExtensionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeClientExtensionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsNotFound creates a SetTradeClientExtensionsNotFound with default headers values
func NewSetTradeClientExtensionsNotFound() *SetTradeClientExtensionsNotFound {
	return &SetTradeClientExtensionsNotFound{}
}

/*SetTradeClientExtensionsNotFound handles this case with default header values.

The Account or Trade specified does not exist.
*/
type SetTradeClientExtensionsNotFound struct {
	Payload *models.SetTradeClientExtensionsNotFoundBody
}

func (o *SetTradeClientExtensionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsNotFound  %+v", 404, o.Payload)
}

func (o *SetTradeClientExtensionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SetTradeClientExtensionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsMethodNotAllowed creates a SetTradeClientExtensionsMethodNotAllowed with default headers values
func NewSetTradeClientExtensionsMethodNotAllowed() *SetTradeClientExtensionsMethodNotAllowed {
	return &SetTradeClientExtensionsMethodNotAllowed{}
}

/*SetTradeClientExtensionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type SetTradeClientExtensionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeClientExtensionsMethodNotAllowedBody
}

func (o *SetTradeClientExtensionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SetTradeClientExtensionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeClientExtensionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
