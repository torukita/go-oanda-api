// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetOrderReader is a Reader for the GetOrder structure.
type GetOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrderOK creates a GetOrderOK with default headers values
func NewGetOrderOK() *GetOrderOK {
	return &GetOrderOK{}
}

/*GetOrderOK handles this case with default header values.

The details of the Order requested
*/
type GetOrderOK struct {
	/*A link to the next page of results if the results were paginated
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetOrderOKBody
}

func (o *GetOrderOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders/{orderSpecifier}][%d] getOrderOK  %+v", 200, o.Payload)
}

func (o *GetOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetOrderOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderUnauthorized creates a GetOrderUnauthorized with default headers values
func NewGetOrderUnauthorized() *GetOrderUnauthorized {
	return &GetOrderUnauthorized{}
}

/*GetOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetOrderUnauthorizedBody
}

func (o *GetOrderUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders/{orderSpecifier}][%d] getOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderNotFound creates a GetOrderNotFound with default headers values
func NewGetOrderNotFound() *GetOrderNotFound {
	return &GetOrderNotFound{}
}

/*GetOrderNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetOrderNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetOrderNotFoundBody
}

func (o *GetOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders/{orderSpecifier}][%d] getOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMethodNotAllowed creates a GetOrderMethodNotAllowed with default headers values
func NewGetOrderMethodNotAllowed() *GetOrderMethodNotAllowed {
	return &GetOrderMethodNotAllowed{}
}

/*GetOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetOrderMethodNotAllowedBody
}

func (o *GetOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/orders/{orderSpecifier}][%d] getOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
