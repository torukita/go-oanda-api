// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListOpenPositionsReader is a Reader for the ListOpenPositions structure.
type ListOpenPositionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOpenPositionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOpenPositionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListOpenPositionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListOpenPositionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListOpenPositionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOpenPositionsOK creates a ListOpenPositionsOK with default headers values
func NewListOpenPositionsOK() *ListOpenPositionsOK {
	return &ListOpenPositionsOK{}
}

/*ListOpenPositionsOK handles this case with default header values.

The Account's open Positions are provided.
*/
type ListOpenPositionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenPositionsOKBody
}

func (o *ListOpenPositionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openPositions][%d] listOpenPositionsOK  %+v", 200, o.Payload)
}

func (o *ListOpenPositionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenPositionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenPositionsUnauthorized creates a ListOpenPositionsUnauthorized with default headers values
func NewListOpenPositionsUnauthorized() *ListOpenPositionsUnauthorized {
	return &ListOpenPositionsUnauthorized{}
}

/*ListOpenPositionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListOpenPositionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenPositionsUnauthorizedBody
}

func (o *ListOpenPositionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openPositions][%d] listOpenPositionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOpenPositionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenPositionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenPositionsNotFound creates a ListOpenPositionsNotFound with default headers values
func NewListOpenPositionsNotFound() *ListOpenPositionsNotFound {
	return &ListOpenPositionsNotFound{}
}

/*ListOpenPositionsNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListOpenPositionsNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenPositionsNotFoundBody
}

func (o *ListOpenPositionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openPositions][%d] listOpenPositionsNotFound  %+v", 404, o.Payload)
}

func (o *ListOpenPositionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenPositionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOpenPositionsMethodNotAllowed creates a ListOpenPositionsMethodNotAllowed with default headers values
func NewListOpenPositionsMethodNotAllowed() *ListOpenPositionsMethodNotAllowed {
	return &ListOpenPositionsMethodNotAllowed{}
}

/*ListOpenPositionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListOpenPositionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListOpenPositionsMethodNotAllowedBody
}

func (o *ListOpenPositionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/openPositions][%d] listOpenPositionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListOpenPositionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListOpenPositionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
