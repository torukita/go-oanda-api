// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListAccountsReader is a Reader for the ListAccounts structure.
type ListAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListAccountsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListAccountsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAccountsOK creates a ListAccountsOK with default headers values
func NewListAccountsOK() *ListAccountsOK {
	return &ListAccountsOK{}
}

/*ListAccountsOK handles this case with default header values.

The list of authorized Accounts has been provided.
*/
type ListAccountsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListAccountsOKBody
}

func (o *ListAccountsOK) Error() string {
	return fmt.Sprintf("[GET /accounts][%d] listAccountsOK  %+v", 200, o.Payload)
}

func (o *ListAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListAccountsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccountsUnauthorized creates a ListAccountsUnauthorized with default headers values
func NewListAccountsUnauthorized() *ListAccountsUnauthorized {
	return &ListAccountsUnauthorized{}
}

/*ListAccountsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListAccountsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListAccountsUnauthorizedBody
}

func (o *ListAccountsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts][%d] listAccountsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAccountsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListAccountsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccountsMethodNotAllowed creates a ListAccountsMethodNotAllowed with default headers values
func NewListAccountsMethodNotAllowed() *ListAccountsMethodNotAllowed {
	return &ListAccountsMethodNotAllowed{}
}

/*ListAccountsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListAccountsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListAccountsMethodNotAllowedBody
}

func (o *ListAccountsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts][%d] listAccountsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListAccountsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListAccountsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
