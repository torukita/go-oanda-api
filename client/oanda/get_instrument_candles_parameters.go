// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstrumentCandlesParams creates a new GetInstrumentCandlesParams object
// with the default values initialized.
func NewGetInstrumentCandlesParams() *GetInstrumentCandlesParams {
	var ()
	return &GetInstrumentCandlesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstrumentCandlesParamsWithTimeout creates a new GetInstrumentCandlesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstrumentCandlesParamsWithTimeout(timeout time.Duration) *GetInstrumentCandlesParams {
	var ()
	return &GetInstrumentCandlesParams{

		timeout: timeout,
	}
}

// NewGetInstrumentCandlesParamsWithContext creates a new GetInstrumentCandlesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstrumentCandlesParamsWithContext(ctx context.Context) *GetInstrumentCandlesParams {
	var ()
	return &GetInstrumentCandlesParams{

		Context: ctx,
	}
}

// NewGetInstrumentCandlesParamsWithHTTPClient creates a new GetInstrumentCandlesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstrumentCandlesParamsWithHTTPClient(client *http.Client) *GetInstrumentCandlesParams {
	var ()
	return &GetInstrumentCandlesParams{
		HTTPClient: client,
	}
}

/*GetInstrumentCandlesParams contains all the parameters to send to the API endpoint
for the get instrument candles operation typically these are written to a http.Request
*/
type GetInstrumentCandlesParams struct {

	/*AcceptDatetimeFormat
	  Format of DateTime fields in the request and response.

	*/
	AcceptDatetimeFormat *string
	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*AlignmentTimezone
	  The timezone to use for the dailyAlignment parameter. Candlesticks with daily alignment will be aligned to the dailyAlignment hour within the alignmentTimezone.

	*/
	AlignmentTimezone *string
	/*Count
	  The number of candlesticks to return in the reponse. Count should not be specified if both the start and end parameters are provided, as the time range combined with the graularity will determine the number of candlesticks to return.

	*/
	Count *int64
	/*DailyAlignment
	  The hour of the day (in the specified timezone) to use for granularities that have daily alignments.

	*/
	DailyAlignment *int64
	/*From
	  The start of the time range to fetch candlesticks for.

	*/
	From *string
	/*Granularity
	  The granularity of the candlesticks to fetch

	*/
	Granularity *string
	/*IncludeFirst
	  A flag that controls whether the candlestick that is covered by the from time should be included in the results. This flag enables clients to use the timestamp of the last completed candlestick received to poll for future candlesticks but avoid receiving the previous candlestick repeatedly.

	*/
	IncludeFirst *bool
	/*Instrument
	  Name of the Instrument

	*/
	Instrument string
	/*Price
	  The Price component(s) to get candlestick data for. Can contain any combination of the characters "M" (midpoint candles) "B" (bid candles) and "A" (ask candles).

	*/
	Price *string
	/*Smooth
	  A flag that controls whether the candlestick is "smoothed" or not.  A smoothed candlestick uses the previous candle's close price as its open price, while an unsmoothed candlestick uses the first price from its time range as its open price.

	*/
	Smooth *bool
	/*To
	  The end of the time range to fetch candlesticks for.

	*/
	To *string
	/*WeeklyAlignment
	  The day of the week used for granularities that have weekly alignment.

	*/
	WeeklyAlignment *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithTimeout(timeout time.Duration) *GetInstrumentCandlesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithContext(ctx context.Context) *GetInstrumentCandlesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithHTTPClient(client *http.Client) *GetInstrumentCandlesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithAcceptDatetimeFormat(acceptDatetimeFormat *string) *GetInstrumentCandlesParams {
	o.SetAcceptDatetimeFormat(acceptDatetimeFormat)
	return o
}

// SetAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetAcceptDatetimeFormat(acceptDatetimeFormat *string) {
	o.AcceptDatetimeFormat = acceptDatetimeFormat
}

// WithAuthorization adds the authorization to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithAuthorization(authorization string) *GetInstrumentCandlesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAlignmentTimezone adds the alignmentTimezone to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithAlignmentTimezone(alignmentTimezone *string) *GetInstrumentCandlesParams {
	o.SetAlignmentTimezone(alignmentTimezone)
	return o
}

// SetAlignmentTimezone adds the alignmentTimezone to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetAlignmentTimezone(alignmentTimezone *string) {
	o.AlignmentTimezone = alignmentTimezone
}

// WithCount adds the count to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithCount(count *int64) *GetInstrumentCandlesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetCount(count *int64) {
	o.Count = count
}

// WithDailyAlignment adds the dailyAlignment to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithDailyAlignment(dailyAlignment *int64) *GetInstrumentCandlesParams {
	o.SetDailyAlignment(dailyAlignment)
	return o
}

// SetDailyAlignment adds the dailyAlignment to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetDailyAlignment(dailyAlignment *int64) {
	o.DailyAlignment = dailyAlignment
}

// WithFrom adds the from to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithFrom(from *string) *GetInstrumentCandlesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetFrom(from *string) {
	o.From = from
}

// WithGranularity adds the granularity to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithGranularity(granularity *string) *GetInstrumentCandlesParams {
	o.SetGranularity(granularity)
	return o
}

// SetGranularity adds the granularity to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetGranularity(granularity *string) {
	o.Granularity = granularity
}

// WithIncludeFirst adds the includeFirst to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithIncludeFirst(includeFirst *bool) *GetInstrumentCandlesParams {
	o.SetIncludeFirst(includeFirst)
	return o
}

// SetIncludeFirst adds the includeFirst to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetIncludeFirst(includeFirst *bool) {
	o.IncludeFirst = includeFirst
}

// WithInstrument adds the instrument to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithInstrument(instrument string) *GetInstrumentCandlesParams {
	o.SetInstrument(instrument)
	return o
}

// SetInstrument adds the instrument to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetInstrument(instrument string) {
	o.Instrument = instrument
}

// WithPrice adds the price to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithPrice(price *string) *GetInstrumentCandlesParams {
	o.SetPrice(price)
	return o
}

// SetPrice adds the price to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetPrice(price *string) {
	o.Price = price
}

// WithSmooth adds the smooth to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithSmooth(smooth *bool) *GetInstrumentCandlesParams {
	o.SetSmooth(smooth)
	return o
}

// SetSmooth adds the smooth to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetSmooth(smooth *bool) {
	o.Smooth = smooth
}

// WithTo adds the to to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithTo(to *string) *GetInstrumentCandlesParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetTo(to *string) {
	o.To = to
}

// WithWeeklyAlignment adds the weeklyAlignment to the get instrument candles params
func (o *GetInstrumentCandlesParams) WithWeeklyAlignment(weeklyAlignment *string) *GetInstrumentCandlesParams {
	o.SetWeeklyAlignment(weeklyAlignment)
	return o
}

// SetWeeklyAlignment adds the weeklyAlignment to the get instrument candles params
func (o *GetInstrumentCandlesParams) SetWeeklyAlignment(weeklyAlignment *string) {
	o.WeeklyAlignment = weeklyAlignment
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstrumentCandlesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptDatetimeFormat != nil {

		// header param Accept-Datetime-Format
		if err := r.SetHeaderParam("Accept-Datetime-Format", *o.AcceptDatetimeFormat); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.AlignmentTimezone != nil {

		// query param alignmentTimezone
		var qrAlignmentTimezone string
		if o.AlignmentTimezone != nil {
			qrAlignmentTimezone = *o.AlignmentTimezone
		}
		qAlignmentTimezone := qrAlignmentTimezone
		if qAlignmentTimezone != "" {
			if err := r.SetQueryParam("alignmentTimezone", qAlignmentTimezone); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.DailyAlignment != nil {

		// query param dailyAlignment
		var qrDailyAlignment int64
		if o.DailyAlignment != nil {
			qrDailyAlignment = *o.DailyAlignment
		}
		qDailyAlignment := swag.FormatInt64(qrDailyAlignment)
		if qDailyAlignment != "" {
			if err := r.SetQueryParam("dailyAlignment", qDailyAlignment); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Granularity != nil {

		// query param granularity
		var qrGranularity string
		if o.Granularity != nil {
			qrGranularity = *o.Granularity
		}
		qGranularity := qrGranularity
		if qGranularity != "" {
			if err := r.SetQueryParam("granularity", qGranularity); err != nil {
				return err
			}
		}

	}

	if o.IncludeFirst != nil {

		// query param includeFirst
		var qrIncludeFirst bool
		if o.IncludeFirst != nil {
			qrIncludeFirst = *o.IncludeFirst
		}
		qIncludeFirst := swag.FormatBool(qrIncludeFirst)
		if qIncludeFirst != "" {
			if err := r.SetQueryParam("includeFirst", qIncludeFirst); err != nil {
				return err
			}
		}

	}

	// path param instrument
	if err := r.SetPathParam("instrument", o.Instrument); err != nil {
		return err
	}

	if o.Price != nil {

		// query param price
		var qrPrice string
		if o.Price != nil {
			qrPrice = *o.Price
		}
		qPrice := qrPrice
		if qPrice != "" {
			if err := r.SetQueryParam("price", qPrice); err != nil {
				return err
			}
		}

	}

	if o.Smooth != nil {

		// query param smooth
		var qrSmooth bool
		if o.Smooth != nil {
			qrSmooth = *o.Smooth
		}
		qSmooth := swag.FormatBool(qrSmooth)
		if qSmooth != "" {
			if err := r.SetQueryParam("smooth", qSmooth); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if o.WeeklyAlignment != nil {

		// query param weeklyAlignment
		var qrWeeklyAlignment string
		if o.WeeklyAlignment != nil {
			qrWeeklyAlignment = *o.WeeklyAlignment
		}
		qWeeklyAlignment := qrWeeklyAlignment
		if qWeeklyAlignment != "" {
			if err := r.SetQueryParam("weeklyAlignment", qWeeklyAlignment); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
