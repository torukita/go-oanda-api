// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetInstrumentsInstrumentPositionBookReader is a Reader for the GetInstrumentsInstrumentPositionBook structure.
type GetInstrumentsInstrumentPositionBookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentsInstrumentPositionBookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstrumentsInstrumentPositionBookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstrumentsInstrumentPositionBookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstrumentsInstrumentPositionBookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstrumentsInstrumentPositionBookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstrumentsInstrumentPositionBookMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstrumentsInstrumentPositionBookOK creates a GetInstrumentsInstrumentPositionBookOK with default headers values
func NewGetInstrumentsInstrumentPositionBookOK() *GetInstrumentsInstrumentPositionBookOK {
	return &GetInstrumentsInstrumentPositionBookOK{}
}

/*GetInstrumentsInstrumentPositionBookOK handles this case with default header values.

The position book has been successfully provided.
*/
type GetInstrumentsInstrumentPositionBookOK struct {
	/*A link to the next/previous position book snapshot.
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentPositionBookOKBody
}

func (o *GetInstrumentsInstrumentPositionBookOK) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/positionBook][%d] getInstrumentsInstrumentPositionBookOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentsInstrumentPositionBookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentPositionBookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentPositionBookBadRequest creates a GetInstrumentsInstrumentPositionBookBadRequest with default headers values
func NewGetInstrumentsInstrumentPositionBookBadRequest() *GetInstrumentsInstrumentPositionBookBadRequest {
	return &GetInstrumentsInstrumentPositionBookBadRequest{}
}

/*GetInstrumentsInstrumentPositionBookBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetInstrumentsInstrumentPositionBookBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentPositionBookBadRequestBody
}

func (o *GetInstrumentsInstrumentPositionBookBadRequest) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/positionBook][%d] getInstrumentsInstrumentPositionBookBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentsInstrumentPositionBookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentPositionBookBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentPositionBookUnauthorized creates a GetInstrumentsInstrumentPositionBookUnauthorized with default headers values
func NewGetInstrumentsInstrumentPositionBookUnauthorized() *GetInstrumentsInstrumentPositionBookUnauthorized {
	return &GetInstrumentsInstrumentPositionBookUnauthorized{}
}

/*GetInstrumentsInstrumentPositionBookUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetInstrumentsInstrumentPositionBookUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentPositionBookUnauthorizedBody
}

func (o *GetInstrumentsInstrumentPositionBookUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/positionBook][%d] getInstrumentsInstrumentPositionBookUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstrumentsInstrumentPositionBookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentPositionBookUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentPositionBookNotFound creates a GetInstrumentsInstrumentPositionBookNotFound with default headers values
func NewGetInstrumentsInstrumentPositionBookNotFound() *GetInstrumentsInstrumentPositionBookNotFound {
	return &GetInstrumentsInstrumentPositionBookNotFound{}
}

/*GetInstrumentsInstrumentPositionBookNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetInstrumentsInstrumentPositionBookNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentPositionBookNotFoundBody
}

func (o *GetInstrumentsInstrumentPositionBookNotFound) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/positionBook][%d] getInstrumentsInstrumentPositionBookNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentsInstrumentPositionBookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentPositionBookNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentsInstrumentPositionBookMethodNotAllowed creates a GetInstrumentsInstrumentPositionBookMethodNotAllowed with default headers values
func NewGetInstrumentsInstrumentPositionBookMethodNotAllowed() *GetInstrumentsInstrumentPositionBookMethodNotAllowed {
	return &GetInstrumentsInstrumentPositionBookMethodNotAllowed{}
}

/*GetInstrumentsInstrumentPositionBookMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetInstrumentsInstrumentPositionBookMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentsInstrumentPositionBookMethodNotAllowedBody
}

func (o *GetInstrumentsInstrumentPositionBookMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/positionBook][%d] getInstrumentsInstrumentPositionBookMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInstrumentsInstrumentPositionBookMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentsInstrumentPositionBookMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
