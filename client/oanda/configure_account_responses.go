// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ConfigureAccountReader is a Reader for the ConfigureAccount structure.
type ConfigureAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigureAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewConfigureAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewConfigureAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewConfigureAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewConfigureAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewConfigureAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewConfigureAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewConfigureAccountOK creates a ConfigureAccountOK with default headers values
func NewConfigureAccountOK() *ConfigureAccountOK {
	return &ConfigureAccountOK{}
}

/*ConfigureAccountOK handles this case with default header values.

The Account was configured successfully.
*/
type ConfigureAccountOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ConfigureAccountOKBody
}

func (o *ConfigureAccountOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountOK  %+v", 200, o.Payload)
}

func (o *ConfigureAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ConfigureAccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureAccountBadRequest creates a ConfigureAccountBadRequest with default headers values
func NewConfigureAccountBadRequest() *ConfigureAccountBadRequest {
	return &ConfigureAccountBadRequest{}
}

/*ConfigureAccountBadRequest handles this case with default header values.

The configuration specification was invalid.
*/
type ConfigureAccountBadRequest struct {
	Payload *models.ConfigureAccountBadRequestBody
}

func (o *ConfigureAccountBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigureAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigureAccountBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureAccountUnauthorized creates a ConfigureAccountUnauthorized with default headers values
func NewConfigureAccountUnauthorized() *ConfigureAccountUnauthorized {
	return &ConfigureAccountUnauthorized{}
}

/*ConfigureAccountUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ConfigureAccountUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ConfigureAccountUnauthorizedBody
}

func (o *ConfigureAccountUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfigureAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ConfigureAccountUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureAccountForbidden creates a ConfigureAccountForbidden with default headers values
func NewConfigureAccountForbidden() *ConfigureAccountForbidden {
	return &ConfigureAccountForbidden{}
}

/*ConfigureAccountForbidden handles this case with default header values.

The configuration operation was forbidden on the Account.
*/
type ConfigureAccountForbidden struct {
	Payload *models.ConfigureAccountForbiddenBody
}

func (o *ConfigureAccountForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountForbidden  %+v", 403, o.Payload)
}

func (o *ConfigureAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigureAccountForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureAccountNotFound creates a ConfigureAccountNotFound with default headers values
func NewConfigureAccountNotFound() *ConfigureAccountNotFound {
	return &ConfigureAccountNotFound{}
}

/*ConfigureAccountNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ConfigureAccountNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ConfigureAccountNotFoundBody
}

func (o *ConfigureAccountNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountNotFound  %+v", 404, o.Payload)
}

func (o *ConfigureAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ConfigureAccountNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigureAccountMethodNotAllowed creates a ConfigureAccountMethodNotAllowed with default headers values
func NewConfigureAccountMethodNotAllowed() *ConfigureAccountMethodNotAllowed {
	return &ConfigureAccountMethodNotAllowed{}
}

/*ConfigureAccountMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ConfigureAccountMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ConfigureAccountMethodNotAllowedBody
}

func (o *ConfigureAccountMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{accountID}/configuration][%d] configureAccountMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ConfigureAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ConfigureAccountMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
