// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// ListPositionsReader is a Reader for the ListPositions structure.
type ListPositionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPositionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPositionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListPositionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPositionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListPositionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListPositionsOK creates a ListPositionsOK with default headers values
func NewListPositionsOK() *ListPositionsOK {
	return &ListPositionsOK{}
}

/*ListPositionsOK handles this case with default header values.

The Account's Positions are provided.
*/
type ListPositionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListPositionsOKBody
}

func (o *ListPositionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/positions][%d] listPositionsOK  %+v", 200, o.Payload)
}

func (o *ListPositionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListPositionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPositionsUnauthorized creates a ListPositionsUnauthorized with default headers values
func NewListPositionsUnauthorized() *ListPositionsUnauthorized {
	return &ListPositionsUnauthorized{}
}

/*ListPositionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListPositionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListPositionsUnauthorizedBody
}

func (o *ListPositionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/positions][%d] listPositionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPositionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListPositionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPositionsNotFound creates a ListPositionsNotFound with default headers values
func NewListPositionsNotFound() *ListPositionsNotFound {
	return &ListPositionsNotFound{}
}

/*ListPositionsNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListPositionsNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListPositionsNotFoundBody
}

func (o *ListPositionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/positions][%d] listPositionsNotFound  %+v", 404, o.Payload)
}

func (o *ListPositionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListPositionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPositionsMethodNotAllowed creates a ListPositionsMethodNotAllowed with default headers values
func NewListPositionsMethodNotAllowed() *ListPositionsMethodNotAllowed {
	return &ListPositionsMethodNotAllowed{}
}

/*ListPositionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListPositionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.ListPositionsMethodNotAllowedBody
}

func (o *ListPositionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/positions][%d] listPositionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListPositionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.ListPositionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
