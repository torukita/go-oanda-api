// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetTransactionReader is a Reader for the GetTransaction structure.
type GetTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTransactionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTransactionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionOK creates a GetTransactionOK with default headers values
func NewGetTransactionOK() *GetTransactionOK {
	return &GetTransactionOK{}
}

/*GetTransactionOK handles this case with default header values.

The details of the requested Transaction are provided.
*/
type GetTransactionOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionOKBody
}

func (o *GetTransactionOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionOK  %+v", 200, o.Payload)
}

func (o *GetTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionUnauthorized creates a GetTransactionUnauthorized with default headers values
func NewGetTransactionUnauthorized() *GetTransactionUnauthorized {
	return &GetTransactionUnauthorized{}
}

/*GetTransactionUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTransactionUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionUnauthorizedBody
}

func (o *GetTransactionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionNotFound creates a GetTransactionNotFound with default headers values
func NewGetTransactionNotFound() *GetTransactionNotFound {
	return &GetTransactionNotFound{}
}

/*GetTransactionNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTransactionNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionNotFoundBody
}

func (o *GetTransactionNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionMethodNotAllowed creates a GetTransactionMethodNotAllowed with default headers values
func NewGetTransactionMethodNotAllowed() *GetTransactionMethodNotAllowed {
	return &GetTransactionMethodNotAllowed{}
}

/*GetTransactionMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTransactionMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionMethodNotAllowedBody
}

func (o *GetTransactionMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTransactionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
