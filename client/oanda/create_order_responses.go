// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// CreateOrderReader is a Reader for the CreateOrder structure.
type CreateOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateOrderCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCreateOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrderCreated creates a CreateOrderCreated with default headers values
func NewCreateOrderCreated() *CreateOrderCreated {
	return &CreateOrderCreated{}
}

/*CreateOrderCreated handles this case with default header values.

The Order was created as specified
*/
type CreateOrderCreated struct {
	/*A link to the Order that was just created
	 */
	Location string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CreateOrderCreatedBody
}

func (o *CreateOrderCreated) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderCreated  %+v", 201, o.Payload)
}

func (o *CreateOrderCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CreateOrderCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderBadRequest creates a CreateOrderBadRequest with default headers values
func NewCreateOrderBadRequest() *CreateOrderBadRequest {
	return &CreateOrderBadRequest{}
}

/*CreateOrderBadRequest handles this case with default header values.

The Order specification was invalid
*/
type CreateOrderBadRequest struct {
	Payload *models.CreateOrderBadRequestBody
}

func (o *CreateOrderBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateOrderBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderUnauthorized creates a CreateOrderUnauthorized with default headers values
func NewCreateOrderUnauthorized() *CreateOrderUnauthorized {
	return &CreateOrderUnauthorized{}
}

/*CreateOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type CreateOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CreateOrderUnauthorizedBody
}

func (o *CreateOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CreateOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderForbidden creates a CreateOrderForbidden with default headers values
func NewCreateOrderForbidden() *CreateOrderForbidden {
	return &CreateOrderForbidden{}
}

/*CreateOrderForbidden handles this case with default header values.

Forbidden. The client has provided a token that does not authorize them to perform the action implemented by teh API endpoint.
*/
type CreateOrderForbidden struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CreateOrderForbiddenBody
}

func (o *CreateOrderForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderForbidden  %+v", 403, o.Payload)
}

func (o *CreateOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CreateOrderForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderNotFound creates a CreateOrderNotFound with default headers values
func NewCreateOrderNotFound() *CreateOrderNotFound {
	return &CreateOrderNotFound{}
}

/*CreateOrderNotFound handles this case with default header values.

The Order or Account specified does not exist.
*/
type CreateOrderNotFound struct {
	Payload *models.CreateOrderNotFoundBody
}

func (o *CreateOrderNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderNotFound  %+v", 404, o.Payload)
}

func (o *CreateOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderMethodNotAllowed creates a CreateOrderMethodNotAllowed with default headers values
func NewCreateOrderMethodNotAllowed() *CreateOrderMethodNotAllowed {
	return &CreateOrderMethodNotAllowed{}
}

/*CreateOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type CreateOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.CreateOrderMethodNotAllowedBody
}

func (o *CreateOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CreateOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.CreateOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
