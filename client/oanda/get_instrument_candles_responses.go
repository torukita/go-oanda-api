// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetInstrumentCandlesReader is a Reader for the GetInstrumentCandles structure.
type GetInstrumentCandlesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentCandlesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstrumentCandlesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstrumentCandlesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstrumentCandlesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstrumentCandlesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstrumentCandlesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstrumentCandlesOK creates a GetInstrumentCandlesOK with default headers values
func NewGetInstrumentCandlesOK() *GetInstrumentCandlesOK {
	return &GetInstrumentCandlesOK{}
}

/*GetInstrumentCandlesOK handles this case with default header values.

Pricing information has been successfully provided.
*/
type GetInstrumentCandlesOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentCandlesOKBody
}

func (o *GetInstrumentCandlesOK) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/candles][%d] getInstrumentCandlesOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentCandlesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentCandlesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentCandlesBadRequest creates a GetInstrumentCandlesBadRequest with default headers values
func NewGetInstrumentCandlesBadRequest() *GetInstrumentCandlesBadRequest {
	return &GetInstrumentCandlesBadRequest{}
}

/*GetInstrumentCandlesBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetInstrumentCandlesBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentCandlesBadRequestBody
}

func (o *GetInstrumentCandlesBadRequest) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/candles][%d] getInstrumentCandlesBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentCandlesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentCandlesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentCandlesUnauthorized creates a GetInstrumentCandlesUnauthorized with default headers values
func NewGetInstrumentCandlesUnauthorized() *GetInstrumentCandlesUnauthorized {
	return &GetInstrumentCandlesUnauthorized{}
}

/*GetInstrumentCandlesUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetInstrumentCandlesUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentCandlesUnauthorizedBody
}

func (o *GetInstrumentCandlesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/candles][%d] getInstrumentCandlesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstrumentCandlesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentCandlesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentCandlesNotFound creates a GetInstrumentCandlesNotFound with default headers values
func NewGetInstrumentCandlesNotFound() *GetInstrumentCandlesNotFound {
	return &GetInstrumentCandlesNotFound{}
}

/*GetInstrumentCandlesNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetInstrumentCandlesNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentCandlesNotFoundBody
}

func (o *GetInstrumentCandlesNotFound) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/candles][%d] getInstrumentCandlesNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentCandlesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentCandlesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentCandlesMethodNotAllowed creates a GetInstrumentCandlesMethodNotAllowed with default headers values
func NewGetInstrumentCandlesMethodNotAllowed() *GetInstrumentCandlesMethodNotAllowed {
	return &GetInstrumentCandlesMethodNotAllowed{}
}

/*GetInstrumentCandlesMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetInstrumentCandlesMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetInstrumentCandlesMethodNotAllowedBody
}

func (o *GetInstrumentCandlesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/candles][%d] getInstrumentCandlesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInstrumentCandlesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetInstrumentCandlesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
