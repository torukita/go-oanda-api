// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// SetTradeDependentOrdersReader is a Reader for the SetTradeDependentOrders structure.
type SetTradeDependentOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTradeDependentOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetTradeDependentOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetTradeDependentOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSetTradeDependentOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSetTradeDependentOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSetTradeDependentOrdersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetTradeDependentOrdersOK creates a SetTradeDependentOrdersOK with default headers values
func NewSetTradeDependentOrdersOK() *SetTradeDependentOrdersOK {
	return &SetTradeDependentOrdersOK{}
}

/*SetTradeDependentOrdersOK handles this case with default header values.

The Trade's dependent Orders have been modified as requested.
*/
type SetTradeDependentOrdersOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeDependentOrdersOKBody
}

func (o *SetTradeDependentOrdersOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersOK  %+v", 200, o.Payload)
}

func (o *SetTradeDependentOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeDependentOrdersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersBadRequest creates a SetTradeDependentOrdersBadRequest with default headers values
func NewSetTradeDependentOrdersBadRequest() *SetTradeDependentOrdersBadRequest {
	return &SetTradeDependentOrdersBadRequest{}
}

/*SetTradeDependentOrdersBadRequest handles this case with default header values.

The Trade's dependent Orders cannot be modified as requested.
*/
type SetTradeDependentOrdersBadRequest struct {
	Payload *models.SetTradeDependentOrdersBadRequestBody
}

func (o *SetTradeDependentOrdersBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *SetTradeDependentOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SetTradeDependentOrdersBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersUnauthorized creates a SetTradeDependentOrdersUnauthorized with default headers values
func NewSetTradeDependentOrdersUnauthorized() *SetTradeDependentOrdersUnauthorized {
	return &SetTradeDependentOrdersUnauthorized{}
}

/*SetTradeDependentOrdersUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type SetTradeDependentOrdersUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeDependentOrdersUnauthorizedBody
}

func (o *SetTradeDependentOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTradeDependentOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeDependentOrdersUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersNotFound creates a SetTradeDependentOrdersNotFound with default headers values
func NewSetTradeDependentOrdersNotFound() *SetTradeDependentOrdersNotFound {
	return &SetTradeDependentOrdersNotFound{}
}

/*SetTradeDependentOrdersNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type SetTradeDependentOrdersNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeDependentOrdersNotFoundBody
}

func (o *SetTradeDependentOrdersNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersNotFound  %+v", 404, o.Payload)
}

func (o *SetTradeDependentOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeDependentOrdersNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersMethodNotAllowed creates a SetTradeDependentOrdersMethodNotAllowed with default headers values
func NewSetTradeDependentOrdersMethodNotAllowed() *SetTradeDependentOrdersMethodNotAllowed {
	return &SetTradeDependentOrdersMethodNotAllowed{}
}

/*SetTradeDependentOrdersMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type SetTradeDependentOrdersMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.SetTradeDependentOrdersMethodNotAllowedBody
}

func (o *SetTradeDependentOrdersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SetTradeDependentOrdersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.SetTradeDependentOrdersMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
