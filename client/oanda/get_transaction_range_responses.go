// Code generated by go-swagger; DO NOT EDIT.

package oanda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/torukita/go-oanda-api/models"
)

// GetTransactionRangeReader is a Reader for the GetTransactionRange structure.
type GetTransactionRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTransactionRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTransactionRangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTransactionRangeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewGetTransactionRangeRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionRangeOK creates a GetTransactionRangeOK with default headers values
func NewGetTransactionRangeOK() *GetTransactionRangeOK {
	return &GetTransactionRangeOK{}
}

/*GetTransactionRangeOK handles this case with default header values.

The requested time range of Transactions are provided.
*/
type GetTransactionRangeOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeOKBody
}

func (o *GetTransactionRangeOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeOK  %+v", 200, o.Payload)
}

func (o *GetTransactionRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeBadRequest creates a GetTransactionRangeBadRequest with default headers values
func NewGetTransactionRangeBadRequest() *GetTransactionRangeBadRequest {
	return &GetTransactionRangeBadRequest{}
}

/*GetTransactionRangeBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetTransactionRangeBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeBadRequestBody
}

func (o *GetTransactionRangeBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeUnauthorized creates a GetTransactionRangeUnauthorized with default headers values
func NewGetTransactionRangeUnauthorized() *GetTransactionRangeUnauthorized {
	return &GetTransactionRangeUnauthorized{}
}

/*GetTransactionRangeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTransactionRangeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeUnauthorizedBody
}

func (o *GetTransactionRangeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionRangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeNotFound creates a GetTransactionRangeNotFound with default headers values
func NewGetTransactionRangeNotFound() *GetTransactionRangeNotFound {
	return &GetTransactionRangeNotFound{}
}

/*GetTransactionRangeNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTransactionRangeNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeNotFoundBody
}

func (o *GetTransactionRangeNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeMethodNotAllowed creates a GetTransactionRangeMethodNotAllowed with default headers values
func NewGetTransactionRangeMethodNotAllowed() *GetTransactionRangeMethodNotAllowed {
	return &GetTransactionRangeMethodNotAllowed{}
}

/*GetTransactionRangeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTransactionRangeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeMethodNotAllowedBody
}

func (o *GetTransactionRangeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTransactionRangeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeRequestRangeNotSatisfiable creates a GetTransactionRangeRequestRangeNotSatisfiable with default headers values
func NewGetTransactionRangeRequestRangeNotSatisfiable() *GetTransactionRangeRequestRangeNotSatisfiable {
	return &GetTransactionRangeRequestRangeNotSatisfiable{}
}

/*GetTransactionRangeRequestRangeNotSatisfiable handles this case with default header values.

Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.
*/
type GetTransactionRangeRequestRangeNotSatisfiable struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *models.GetTransactionRangeRequestedRangeNotSatisfiableBody
}

func (o *GetTransactionRangeRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeRequestRangeNotSatisfiable  %+v", 416, o.Payload)
}

func (o *GetTransactionRangeRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(models.GetTransactionRangeRequestedRangeNotSatisfiableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
