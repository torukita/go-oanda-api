// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TakeProfitOrder A TakeProfitOrder is an order that is linked to an open Trade and created with a price threshold. The Order will be filled (closing the Trade) by the first price that is equal to or better than the threshold. A TakeProfitOrder cannot be used to open a new Position.
// swagger:model TakeProfitOrder
type TakeProfitOrder struct {

	// Date/time when the Order was cancelled (only provided when the state of the Order is CANCELLED)
	CancelledTime string `json:"cancelledTime,omitempty"`

	// ID of the Transaction that cancelled the Order (only provided when the Order's state is CANCELLED)
	CancellingTransactionID string `json:"cancellingTransactionID,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The client ID of the Trade to be closed when the price threshold is breached.
	ClientTradeID string `json:"clientTradeID,omitempty"`

	// The time when the Order was created.
	CreateTime string `json:"createTime,omitempty"`

	// Date/time when the Order was filled (only provided when the Order's state is FILLED)
	FilledTime string `json:"filledTime,omitempty"`

	// ID of the Transaction that filled this Order (only provided when the Order's state is FILLED)
	FillingTransactionID string `json:"fillingTransactionID,omitempty"`

	// The date/time when the TakeProfit Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// The Order's identifier, unique within the Order's Account.
	ID string `json:"id,omitempty"`

	// The price threshold specified for the TakeProfit Order. The associated Trade will be closed by a market price that is equal to or better than this threshold.
	Price string `json:"price,omitempty"`

	// The ID of the Order that replaced this Order (only provided if this Order was cancelled as part of a cancel/replace).
	ReplacedByOrderID string `json:"replacedByOrderID,omitempty"`

	// The ID of the Order that was replaced by this Order (only provided if this Order was created as part of a cancel/replace).
	ReplacesOrderID string `json:"replacesOrderID,omitempty"`

	// The current state of the Order.
	State string `json:"state,omitempty"`

	// The time-in-force requested for the TakeProfit Order. Restricted to "GTC", "GFD" and "GTD" for TakeProfit Orders.
	TimeInForce string `json:"timeInForce,omitempty"`

	// Trade IDs of Trades closed when the Order was filled (only provided when the Order's state is FILLED and one or more Trades were closed as a result of the fill)
	TradeClosedIds []string `json:"tradeClosedIDs"`

	// The ID of the Trade to close when the price threshold is breached.
	TradeID string `json:"tradeID,omitempty"`

	// Trade ID of Trade opened when the Order was filled (only provided when the Order's state is FILLED and a Trade was opened as a result of the fill)
	TradeOpenedID string `json:"tradeOpenedID,omitempty"`

	// Trade ID of Trade reduced when the Order was filled (only provided when the Order's state is FILLED and a Trade was reduced as a result of the fill)
	TradeReducedID string `json:"tradeReducedID,omitempty"`

	// Specification of what component of a price should be used for comparison when determining if the Order should be filled.
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The type of the Order. Always set to "TAKE_PROFIT" for Take Profit Orders.
	Type string `json:"type,omitempty"`
}

// Validate validates this take profit order
func (m *TakeProfitOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClosedIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TakeProfitOrder) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var takeProfitOrderTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","FILLED","TRIGGERED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		takeProfitOrderTypeStatePropEnum = append(takeProfitOrderTypeStatePropEnum, v)
	}
}

const (
	// TakeProfitOrderStatePENDING captures enum value "PENDING"
	TakeProfitOrderStatePENDING string = "PENDING"
	// TakeProfitOrderStateFILLED captures enum value "FILLED"
	TakeProfitOrderStateFILLED string = "FILLED"
	// TakeProfitOrderStateTRIGGERED captures enum value "TRIGGERED"
	TakeProfitOrderStateTRIGGERED string = "TRIGGERED"
	// TakeProfitOrderStateCANCELLED captures enum value "CANCELLED"
	TakeProfitOrderStateCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *TakeProfitOrder) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, takeProfitOrderTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TakeProfitOrder) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var takeProfitOrderTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		takeProfitOrderTypeTimeInForcePropEnum = append(takeProfitOrderTypeTimeInForcePropEnum, v)
	}
}

const (
	// TakeProfitOrderTimeInForceGTC captures enum value "GTC"
	TakeProfitOrderTimeInForceGTC string = "GTC"
	// TakeProfitOrderTimeInForceGTD captures enum value "GTD"
	TakeProfitOrderTimeInForceGTD string = "GTD"
	// TakeProfitOrderTimeInForceGFD captures enum value "GFD"
	TakeProfitOrderTimeInForceGFD string = "GFD"
	// TakeProfitOrderTimeInForceFOK captures enum value "FOK"
	TakeProfitOrderTimeInForceFOK string = "FOK"
	// TakeProfitOrderTimeInForceIOC captures enum value "IOC"
	TakeProfitOrderTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *TakeProfitOrder) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, takeProfitOrderTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TakeProfitOrder) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

func (m *TakeProfitOrder) validateTradeClosedIds(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClosedIds) { // not required
		return nil
	}

	return nil
}

var takeProfitOrderTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		takeProfitOrderTypeTriggerConditionPropEnum = append(takeProfitOrderTypeTriggerConditionPropEnum, v)
	}
}

const (
	// TakeProfitOrderTriggerConditionDEFAULT captures enum value "DEFAULT"
	TakeProfitOrderTriggerConditionDEFAULT string = "DEFAULT"
	// TakeProfitOrderTriggerConditionINVERSE captures enum value "INVERSE"
	TakeProfitOrderTriggerConditionINVERSE string = "INVERSE"
	// TakeProfitOrderTriggerConditionBID captures enum value "BID"
	TakeProfitOrderTriggerConditionBID string = "BID"
	// TakeProfitOrderTriggerConditionASK captures enum value "ASK"
	TakeProfitOrderTriggerConditionASK string = "ASK"
	// TakeProfitOrderTriggerConditionMID captures enum value "MID"
	TakeProfitOrderTriggerConditionMID string = "MID"
)

// prop value enum
func (m *TakeProfitOrder) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, takeProfitOrderTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TakeProfitOrder) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var takeProfitOrderTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKET","LIMIT","STOP","MARKET_IF_TOUCHED","TAKE_PROFIT","STOP_LOSS","TRAILING_STOP_LOSS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		takeProfitOrderTypeTypePropEnum = append(takeProfitOrderTypeTypePropEnum, v)
	}
}

const (
	// TakeProfitOrderTypeMARKET captures enum value "MARKET"
	TakeProfitOrderTypeMARKET string = "MARKET"
	// TakeProfitOrderTypeLIMIT captures enum value "LIMIT"
	TakeProfitOrderTypeLIMIT string = "LIMIT"
	// TakeProfitOrderTypeSTOP captures enum value "STOP"
	TakeProfitOrderTypeSTOP string = "STOP"
	// TakeProfitOrderTypeMARKETIFTOUCHED captures enum value "MARKET_IF_TOUCHED"
	TakeProfitOrderTypeMARKETIFTOUCHED string = "MARKET_IF_TOUCHED"
	// TakeProfitOrderTypeTAKEPROFIT captures enum value "TAKE_PROFIT"
	TakeProfitOrderTypeTAKEPROFIT string = "TAKE_PROFIT"
	// TakeProfitOrderTypeSTOPLOSS captures enum value "STOP_LOSS"
	TakeProfitOrderTypeSTOPLOSS string = "STOP_LOSS"
	// TakeProfitOrderTypeTRAILINGSTOPLOSS captures enum value "TRAILING_STOP_LOSS"
	TakeProfitOrderTypeTRAILINGSTOPLOSS string = "TRAILING_STOP_LOSS"
)

// prop value enum
func (m *TakeProfitOrder) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, takeProfitOrderTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TakeProfitOrder) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TakeProfitOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TakeProfitOrder) UnmarshalBinary(b []byte) error {
	var res TakeProfitOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
