// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OrderState The current state of the Order.
// swagger:model OrderState
type OrderState string

const (
	// OrderStatePENDING captures enum value "PENDING"
//	OrderStatePENDING OrderState = "PENDING"
	// OrderStateFILLED captures enum value "FILLED"
//	OrderStateFILLED OrderState = "FILLED"
	// OrderStateTRIGGERED captures enum value "TRIGGERED"
//	OrderStateTRIGGERED OrderState = "TRIGGERED"
	// OrderStateCANCELLED captures enum value "CANCELLED"
//	OrderStateCANCELLED OrderState = "CANCELLED"
)

// for schema
var orderStateEnum []interface{}

func init() {
	var res []OrderState
	if err := json.Unmarshal([]byte(`["PENDING","FILLED","TRIGGERED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderStateEnum = append(orderStateEnum, v)
	}
}

func (m OrderState) validateOrderStateEnum(path, location string, value OrderState) error {
	if err := validate.Enum(path, location, value, orderStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this order state
func (m OrderState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
