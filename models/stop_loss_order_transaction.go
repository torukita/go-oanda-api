// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopLossOrderTransaction A StopLossOrderTransaction represents the creation of a StopLoss Order in the user's Account.
// swagger:model StopLossOrderTransaction
type StopLossOrderTransaction struct {

	// The ID of the Account the Transaction was created for.
	AccountID string `json:"accountID,omitempty"`

	// The ID of the "batch" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.
	BatchID string `json:"batchID,omitempty"`

	// The ID of the Transaction that cancels the replaced Order (only provided if this Order replaces an existing Order).
	CancellingTransactionID string `json:"cancellingTransactionID,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The client ID of the Trade to be closed when the price threshold is breached.
	ClientTradeID string `json:"clientTradeID,omitempty"`

	// The date/time when the StopLoss Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// The Transaction's Identifier.
	ID string `json:"id,omitempty"`

	// The ID of the OrderFill Transaction that caused this Order to be created (only provided if this Order was created automatically when another Order was filled).
	OrderFillTransactionID string `json:"orderFillTransactionID,omitempty"`

	// The price threshold specified for the StopLoss Order. The associated Trade will be closed by a market price that is equal to or worse than this threshold.
	Price string `json:"price,omitempty"`

	// The reason that the Stop Loss Order was initiated
	Reason string `json:"reason,omitempty"`

	// The ID of the Order that this Order replaces (only provided if this Order replaces an existing Order).
	ReplacesOrderID string `json:"replacesOrderID,omitempty"`

	// The Request ID of the request which generated the transaction.
	RequestID string `json:"requestID,omitempty"`

	// The date/time when the Transaction was created.
	Time string `json:"time,omitempty"`

	// The time-in-force requested for the StopLoss Order. Restricted to "GTC", "GFD" and "GTD" for StopLoss Orders.
	TimeInForce string `json:"timeInForce,omitempty"`

	// The ID of the Trade to close when the price threshold is breached.
	TradeID string `json:"tradeID,omitempty"`

	// Specification of what component of a price should be used for comparison when determining if the Order should be filled.
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The Type of the Transaction. Always set to "STOP_LOSS_ORDER" in a StopLossOrderTransaction.
	Type string `json:"type,omitempty"`

	// The ID of the user that initiated the creation of the Transaction.
	UserID int64 `json:"userID,omitempty"`
}

// Validate validates this stop loss order transaction
func (m *StopLossOrderTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopLossOrderTransaction) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var stopLossOrderTransactionTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLIENT_ORDER","REPLACEMENT","ON_FILL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTransactionTypeReasonPropEnum = append(stopLossOrderTransactionTypeReasonPropEnum, v)
	}
}

const (
	// StopLossOrderTransactionReasonCLIENTORDER captures enum value "CLIENT_ORDER"
	StopLossOrderTransactionReasonCLIENTORDER string = "CLIENT_ORDER"
	// StopLossOrderTransactionReasonREPLACEMENT captures enum value "REPLACEMENT"
	StopLossOrderTransactionReasonREPLACEMENT string = "REPLACEMENT"
	// StopLossOrderTransactionReasonONFILL captures enum value "ON_FILL"
	StopLossOrderTransactionReasonONFILL string = "ON_FILL"
)

// prop value enum
func (m *StopLossOrderTransaction) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTransactionTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderTransaction) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

var stopLossOrderTransactionTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTransactionTypeTimeInForcePropEnum = append(stopLossOrderTransactionTypeTimeInForcePropEnum, v)
	}
}

const (
	// StopLossOrderTransactionTimeInForceGTC captures enum value "GTC"
	StopLossOrderTransactionTimeInForceGTC string = "GTC"
	// StopLossOrderTransactionTimeInForceGTD captures enum value "GTD"
	StopLossOrderTransactionTimeInForceGTD string = "GTD"
	// StopLossOrderTransactionTimeInForceGFD captures enum value "GFD"
	StopLossOrderTransactionTimeInForceGFD string = "GFD"
	// StopLossOrderTransactionTimeInForceFOK captures enum value "FOK"
	StopLossOrderTransactionTimeInForceFOK string = "FOK"
	// StopLossOrderTransactionTimeInForceIOC captures enum value "IOC"
	StopLossOrderTransactionTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *StopLossOrderTransaction) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTransactionTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderTransaction) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

var stopLossOrderTransactionTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTransactionTypeTriggerConditionPropEnum = append(stopLossOrderTransactionTypeTriggerConditionPropEnum, v)
	}
}

const (
	// StopLossOrderTransactionTriggerConditionDEFAULT captures enum value "DEFAULT"
	StopLossOrderTransactionTriggerConditionDEFAULT string = "DEFAULT"
	// StopLossOrderTransactionTriggerConditionINVERSE captures enum value "INVERSE"
	StopLossOrderTransactionTriggerConditionINVERSE string = "INVERSE"
	// StopLossOrderTransactionTriggerConditionBID captures enum value "BID"
	StopLossOrderTransactionTriggerConditionBID string = "BID"
	// StopLossOrderTransactionTriggerConditionASK captures enum value "ASK"
	StopLossOrderTransactionTriggerConditionASK string = "ASK"
	// StopLossOrderTransactionTriggerConditionMID captures enum value "MID"
	StopLossOrderTransactionTriggerConditionMID string = "MID"
)

// prop value enum
func (m *StopLossOrderTransaction) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTransactionTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderTransaction) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var stopLossOrderTransactionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","CLOSE","REOPEN","CLIENT_CONFIGURE","CLIENT_CONFIGURE_REJECT","TRANSFER_FUNDS","TRANSFER_FUNDS_REJECT","MARKET_ORDER","MARKET_ORDER_REJECT","LIMIT_ORDER","LIMIT_ORDER_REJECT","STOP_ORDER","STOP_ORDER_REJECT","MARKET_IF_TOUCHED_ORDER","MARKET_IF_TOUCHED_ORDER_REJECT","TAKE_PROFIT_ORDER","TAKE_PROFIT_ORDER_REJECT","STOP_LOSS_ORDER","STOP_LOSS_ORDER_REJECT","TRAILING_STOP_LOSS_ORDER","TRAILING_STOP_LOSS_ORDER_REJECT","ORDER_FILL","ORDER_CANCEL","ORDER_CANCEL_REJECT","ORDER_CLIENT_EXTENSIONS_MODIFY","ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT","TRADE_CLIENT_EXTENSIONS_MODIFY","TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT","MARGIN_CALL_ENTER","MARGIN_CALL_EXTEND","MARGIN_CALL_EXIT","DELAYED_TRADE_CLOSURE","DAILY_FINANCING","RESET_RESETTABLE_PL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTransactionTypeTypePropEnum = append(stopLossOrderTransactionTypeTypePropEnum, v)
	}
}

const (
	// StopLossOrderTransactionTypeCREATE captures enum value "CREATE"
	StopLossOrderTransactionTypeCREATE string = "CREATE"
	// StopLossOrderTransactionTypeCLOSE captures enum value "CLOSE"
	StopLossOrderTransactionTypeCLOSE string = "CLOSE"
	// StopLossOrderTransactionTypeREOPEN captures enum value "REOPEN"
	StopLossOrderTransactionTypeREOPEN string = "REOPEN"
	// StopLossOrderTransactionTypeCLIENTCONFIGURE captures enum value "CLIENT_CONFIGURE"
	StopLossOrderTransactionTypeCLIENTCONFIGURE string = "CLIENT_CONFIGURE"
	// StopLossOrderTransactionTypeCLIENTCONFIGUREREJECT captures enum value "CLIENT_CONFIGURE_REJECT"
	StopLossOrderTransactionTypeCLIENTCONFIGUREREJECT string = "CLIENT_CONFIGURE_REJECT"
	// StopLossOrderTransactionTypeTRANSFERFUNDS captures enum value "TRANSFER_FUNDS"
	StopLossOrderTransactionTypeTRANSFERFUNDS string = "TRANSFER_FUNDS"
	// StopLossOrderTransactionTypeTRANSFERFUNDSREJECT captures enum value "TRANSFER_FUNDS_REJECT"
	StopLossOrderTransactionTypeTRANSFERFUNDSREJECT string = "TRANSFER_FUNDS_REJECT"
	// StopLossOrderTransactionTypeMARKETORDER captures enum value "MARKET_ORDER"
	StopLossOrderTransactionTypeMARKETORDER string = "MARKET_ORDER"
	// StopLossOrderTransactionTypeMARKETORDERREJECT captures enum value "MARKET_ORDER_REJECT"
	StopLossOrderTransactionTypeMARKETORDERREJECT string = "MARKET_ORDER_REJECT"
	// StopLossOrderTransactionTypeLIMITORDER captures enum value "LIMIT_ORDER"
	StopLossOrderTransactionTypeLIMITORDER string = "LIMIT_ORDER"
	// StopLossOrderTransactionTypeLIMITORDERREJECT captures enum value "LIMIT_ORDER_REJECT"
	StopLossOrderTransactionTypeLIMITORDERREJECT string = "LIMIT_ORDER_REJECT"
	// StopLossOrderTransactionTypeSTOPORDER captures enum value "STOP_ORDER"
	StopLossOrderTransactionTypeSTOPORDER string = "STOP_ORDER"
	// StopLossOrderTransactionTypeSTOPORDERREJECT captures enum value "STOP_ORDER_REJECT"
	StopLossOrderTransactionTypeSTOPORDERREJECT string = "STOP_ORDER_REJECT"
	// StopLossOrderTransactionTypeMARKETIFTOUCHEDORDER captures enum value "MARKET_IF_TOUCHED_ORDER"
	StopLossOrderTransactionTypeMARKETIFTOUCHEDORDER string = "MARKET_IF_TOUCHED_ORDER"
	// StopLossOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT captures enum value "MARKET_IF_TOUCHED_ORDER_REJECT"
	StopLossOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT string = "MARKET_IF_TOUCHED_ORDER_REJECT"
	// StopLossOrderTransactionTypeTAKEPROFITORDER captures enum value "TAKE_PROFIT_ORDER"
	StopLossOrderTransactionTypeTAKEPROFITORDER string = "TAKE_PROFIT_ORDER"
	// StopLossOrderTransactionTypeTAKEPROFITORDERREJECT captures enum value "TAKE_PROFIT_ORDER_REJECT"
	StopLossOrderTransactionTypeTAKEPROFITORDERREJECT string = "TAKE_PROFIT_ORDER_REJECT"
	// StopLossOrderTransactionTypeSTOPLOSSORDER captures enum value "STOP_LOSS_ORDER"
	StopLossOrderTransactionTypeSTOPLOSSORDER string = "STOP_LOSS_ORDER"
	// StopLossOrderTransactionTypeSTOPLOSSORDERREJECT captures enum value "STOP_LOSS_ORDER_REJECT"
	StopLossOrderTransactionTypeSTOPLOSSORDERREJECT string = "STOP_LOSS_ORDER_REJECT"
	// StopLossOrderTransactionTypeTRAILINGSTOPLOSSORDER captures enum value "TRAILING_STOP_LOSS_ORDER"
	StopLossOrderTransactionTypeTRAILINGSTOPLOSSORDER string = "TRAILING_STOP_LOSS_ORDER"
	// StopLossOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT captures enum value "TRAILING_STOP_LOSS_ORDER_REJECT"
	StopLossOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT string = "TRAILING_STOP_LOSS_ORDER_REJECT"
	// StopLossOrderTransactionTypeORDERFILL captures enum value "ORDER_FILL"
	StopLossOrderTransactionTypeORDERFILL string = "ORDER_FILL"
	// StopLossOrderTransactionTypeORDERCANCEL captures enum value "ORDER_CANCEL"
	StopLossOrderTransactionTypeORDERCANCEL string = "ORDER_CANCEL"
	// StopLossOrderTransactionTypeORDERCANCELREJECT captures enum value "ORDER_CANCEL_REJECT"
	StopLossOrderTransactionTypeORDERCANCELREJECT string = "ORDER_CANCEL_REJECT"
	// StopLossOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY"
	StopLossOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY string = "ORDER_CLIENT_EXTENSIONS_MODIFY"
	// StopLossOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	StopLossOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT string = "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// StopLossOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY"
	StopLossOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY string = "TRADE_CLIENT_EXTENSIONS_MODIFY"
	// StopLossOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	StopLossOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT string = "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// StopLossOrderTransactionTypeMARGINCALLENTER captures enum value "MARGIN_CALL_ENTER"
	StopLossOrderTransactionTypeMARGINCALLENTER string = "MARGIN_CALL_ENTER"
	// StopLossOrderTransactionTypeMARGINCALLEXTEND captures enum value "MARGIN_CALL_EXTEND"
	StopLossOrderTransactionTypeMARGINCALLEXTEND string = "MARGIN_CALL_EXTEND"
	// StopLossOrderTransactionTypeMARGINCALLEXIT captures enum value "MARGIN_CALL_EXIT"
	StopLossOrderTransactionTypeMARGINCALLEXIT string = "MARGIN_CALL_EXIT"
	// StopLossOrderTransactionTypeDELAYEDTRADECLOSURE captures enum value "DELAYED_TRADE_CLOSURE"
	StopLossOrderTransactionTypeDELAYEDTRADECLOSURE string = "DELAYED_TRADE_CLOSURE"
	// StopLossOrderTransactionTypeDAILYFINANCING captures enum value "DAILY_FINANCING"
	StopLossOrderTransactionTypeDAILYFINANCING string = "DAILY_FINANCING"
	// StopLossOrderTransactionTypeRESETRESETTABLEPL captures enum value "RESET_RESETTABLE_PL"
	StopLossOrderTransactionTypeRESETRESETTABLEPL string = "RESET_RESETTABLE_PL"
)

// prop value enum
func (m *StopLossOrderTransaction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTransactionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderTransaction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopLossOrderTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopLossOrderTransaction) UnmarshalBinary(b []byte) error {
	var res StopLossOrderTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
