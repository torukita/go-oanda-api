// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TradeStateFilter The state to filter the Trades by
// swagger:model TradeStateFilter
type TradeStateFilter string

const (
	// TradeStateFilterOPEN captures enum value "OPEN"
	TradeStateFilterOPEN TradeStateFilter = "OPEN"
	// TradeStateFilterCLOSED captures enum value "CLOSED"
	TradeStateFilterCLOSED TradeStateFilter = "CLOSED"
	// TradeStateFilterCLOSEWHENTRADEABLE captures enum value "CLOSE_WHEN_TRADEABLE"
	TradeStateFilterCLOSEWHENTRADEABLE TradeStateFilter = "CLOSE_WHEN_TRADEABLE"
	// TradeStateFilterALL captures enum value "ALL"
	TradeStateFilterALL TradeStateFilter = "ALL"
)

// for schema
var tradeStateFilterEnum []interface{}

func init() {
	var res []TradeStateFilter
	if err := json.Unmarshal([]byte(`["OPEN","CLOSED","CLOSE_WHEN_TRADEABLE","ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tradeStateFilterEnum = append(tradeStateFilterEnum, v)
	}
}

func (m TradeStateFilter) validateTradeStateFilterEnum(path, location string, value TradeStateFilter) error {
	if err := validate.Enum(path, location, value, tradeStateFilterEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this trade state filter
func (m TradeStateFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTradeStateFilterEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
