// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TakeProfitOrderReason The reason that the Take Profit Order was initiated
// swagger:model TakeProfitOrderReason
type TakeProfitOrderReason string

const (
	// TakeProfitOrderReasonCLIENTORDER captures enum value "CLIENT_ORDER"
	TakeProfitOrderReasonCLIENTORDER TakeProfitOrderReason = "CLIENT_ORDER"
	// TakeProfitOrderReasonREPLACEMENT captures enum value "REPLACEMENT"
	TakeProfitOrderReasonREPLACEMENT TakeProfitOrderReason = "REPLACEMENT"
	// TakeProfitOrderReasonONFILL captures enum value "ON_FILL"
	TakeProfitOrderReasonONFILL TakeProfitOrderReason = "ON_FILL"
)

// for schema
var takeProfitOrderReasonEnum []interface{}

func init() {
	var res []TakeProfitOrderReason
	if err := json.Unmarshal([]byte(`["CLIENT_ORDER","REPLACEMENT","ON_FILL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		takeProfitOrderReasonEnum = append(takeProfitOrderReasonEnum, v)
	}
}

func (m TakeProfitOrderReason) validateTakeProfitOrderReasonEnum(path, location string, value TakeProfitOrderReason) error {
	if err := validate.Enum(path, location, value, takeProfitOrderReasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this take profit order reason
func (m TakeProfitOrderReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTakeProfitOrderReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
