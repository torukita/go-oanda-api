// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Candlestick The Candlestick representation
// swagger:model Candlestick
type Candlestick struct {

	// ask
	Ask *CandlestickData `json:"ask,omitempty"`

	// bid
	Bid *CandlestickData `json:"bid,omitempty"`

	// A flag indicating if the candlestick is complete. A complete candlestick is one whose ending time is not in the future.
	Complete bool `json:"complete,omitempty"`

	// mid
	Mid *CandlestickData `json:"mid,omitempty"`

	// The start time of the candlestick
	Time string `json:"time,omitempty"`

	// The number of prices created during the time-range represented by the candlestick.
	Volume int64 `json:"volume,omitempty"`
}

// Validate validates this candlestick
func (m *Candlestick) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Candlestick) validateAsk(formats strfmt.Registry) error {

	if swag.IsZero(m.Ask) { // not required
		return nil
	}

	if m.Ask != nil {

		if err := m.Ask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ask")
			}
			return err
		}
	}

	return nil
}

func (m *Candlestick) validateBid(formats strfmt.Registry) error {

	if swag.IsZero(m.Bid) { // not required
		return nil
	}

	if m.Bid != nil {

		if err := m.Bid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bid")
			}
			return err
		}
	}

	return nil
}

func (m *Candlestick) validateMid(formats strfmt.Registry) error {

	if swag.IsZero(m.Mid) { // not required
		return nil
	}

	if m.Mid != nil {

		if err := m.Mid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Candlestick) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Candlestick) UnmarshalBinary(b []byte) error {
	var res Candlestick
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
