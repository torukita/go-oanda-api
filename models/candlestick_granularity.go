// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CandlestickGranularity The granularity of a candlestick
// swagger:model CandlestickGranularity
type CandlestickGranularity string

const (
	// CandlestickGranularityS5 captures enum value "S5"
	CandlestickGranularityS5 CandlestickGranularity = "S5"
	// CandlestickGranularityS10 captures enum value "S10"
	CandlestickGranularityS10 CandlestickGranularity = "S10"
	// CandlestickGranularityS15 captures enum value "S15"
	CandlestickGranularityS15 CandlestickGranularity = "S15"
	// CandlestickGranularityS30 captures enum value "S30"
	CandlestickGranularityS30 CandlestickGranularity = "S30"
	// CandlestickGranularityM1 captures enum value "M1"
	CandlestickGranularityM1 CandlestickGranularity = "M1"
	// CandlestickGranularityM2 captures enum value "M2"
	CandlestickGranularityM2 CandlestickGranularity = "M2"
	// CandlestickGranularityM4 captures enum value "M4"
	CandlestickGranularityM4 CandlestickGranularity = "M4"
	// CandlestickGranularityM5 captures enum value "M5"
	CandlestickGranularityM5 CandlestickGranularity = "M5"
	// CandlestickGranularityM10 captures enum value "M10"
	CandlestickGranularityM10 CandlestickGranularity = "M10"
	// CandlestickGranularityM15 captures enum value "M15"
	CandlestickGranularityM15 CandlestickGranularity = "M15"
	// CandlestickGranularityM30 captures enum value "M30"
	CandlestickGranularityM30 CandlestickGranularity = "M30"
	// CandlestickGranularityH1 captures enum value "H1"
	CandlestickGranularityH1 CandlestickGranularity = "H1"
	// CandlestickGranularityH2 captures enum value "H2"
	CandlestickGranularityH2 CandlestickGranularity = "H2"
	// CandlestickGranularityH3 captures enum value "H3"
	CandlestickGranularityH3 CandlestickGranularity = "H3"
	// CandlestickGranularityH4 captures enum value "H4"
	CandlestickGranularityH4 CandlestickGranularity = "H4"
	// CandlestickGranularityH6 captures enum value "H6"
	CandlestickGranularityH6 CandlestickGranularity = "H6"
	// CandlestickGranularityH8 captures enum value "H8"
	CandlestickGranularityH8 CandlestickGranularity = "H8"
	// CandlestickGranularityH12 captures enum value "H12"
	CandlestickGranularityH12 CandlestickGranularity = "H12"
	// CandlestickGranularityD captures enum value "D"
	CandlestickGranularityD CandlestickGranularity = "D"
	// CandlestickGranularityW captures enum value "W"
	CandlestickGranularityW CandlestickGranularity = "W"
	// CandlestickGranularityM captures enum value "M"
	CandlestickGranularityM CandlestickGranularity = "M"
)

// for schema
var candlestickGranularityEnum []interface{}

func init() {
	var res []CandlestickGranularity
	if err := json.Unmarshal([]byte(`["S5","S10","S15","S30","M1","M2","M4","M5","M10","M15","M30","H1","H2","H3","H4","H6","H8","H12","D","W","M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		candlestickGranularityEnum = append(candlestickGranularityEnum, v)
	}
}

func (m CandlestickGranularity) validateCandlestickGranularityEnum(path, location string, value CandlestickGranularity) error {
	if err := validate.Enum(path, location, value, candlestickGranularityEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this candlestick granularity
func (m CandlestickGranularity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCandlestickGranularityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
