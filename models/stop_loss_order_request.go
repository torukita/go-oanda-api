// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopLossOrderRequest A StopLossOrderRequest specifies the parameters that may be set when creating a Stop Loss Order.
// swagger:model StopLossOrderRequest
type StopLossOrderRequest struct {

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The client ID of the Trade to be closed when the price threshold is breached.
	ClientTradeID string `json:"clientTradeID,omitempty"`

	// The date/time when the StopLoss Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// The price threshold specified for the StopLoss Order. The associated Trade will be closed by a market price that is equal to or worse than this threshold.
	Price string `json:"price,omitempty"`

	// The time-in-force requested for the StopLoss Order. Restricted to "GTC", "GFD" and "GTD" for StopLoss Orders.
	TimeInForce string `json:"timeInForce,omitempty"`

	// The ID of the Trade to close when the price threshold is breached.
	TradeID string `json:"tradeID,omitempty"`

	// Specification of what component of a price should be used for comparison when determining if the Order should be filled.
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The type of the Order to Create. Must be set to "STOP_LOSS" when creating a Stop Loss Order.
	Type string `json:"type,omitempty"`
}

// Validate validates this stop loss order request
func (m *StopLossOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopLossOrderRequest) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var stopLossOrderRequestTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTimeInForcePropEnum = append(stopLossOrderRequestTypeTimeInForcePropEnum, v)
	}
}

const (
	// StopLossOrderRequestTimeInForceGTC captures enum value "GTC"
	StopLossOrderRequestTimeInForceGTC string = "GTC"
	// StopLossOrderRequestTimeInForceGTD captures enum value "GTD"
	StopLossOrderRequestTimeInForceGTD string = "GTD"
	// StopLossOrderRequestTimeInForceGFD captures enum value "GFD"
	StopLossOrderRequestTimeInForceGFD string = "GFD"
	// StopLossOrderRequestTimeInForceFOK captures enum value "FOK"
	StopLossOrderRequestTimeInForceFOK string = "FOK"
	// StopLossOrderRequestTimeInForceIOC captures enum value "IOC"
	StopLossOrderRequestTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *StopLossOrderRequest) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

var stopLossOrderRequestTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTriggerConditionPropEnum = append(stopLossOrderRequestTypeTriggerConditionPropEnum, v)
	}
}

const (
	// StopLossOrderRequestTriggerConditionDEFAULT captures enum value "DEFAULT"
	StopLossOrderRequestTriggerConditionDEFAULT string = "DEFAULT"
	// StopLossOrderRequestTriggerConditionINVERSE captures enum value "INVERSE"
	StopLossOrderRequestTriggerConditionINVERSE string = "INVERSE"
	// StopLossOrderRequestTriggerConditionBID captures enum value "BID"
	StopLossOrderRequestTriggerConditionBID string = "BID"
	// StopLossOrderRequestTriggerConditionASK captures enum value "ASK"
	StopLossOrderRequestTriggerConditionASK string = "ASK"
	// StopLossOrderRequestTriggerConditionMID captures enum value "MID"
	StopLossOrderRequestTriggerConditionMID string = "MID"
)

// prop value enum
func (m *StopLossOrderRequest) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var stopLossOrderRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKET","LIMIT","STOP","MARKET_IF_TOUCHED","TAKE_PROFIT","STOP_LOSS","TRAILING_STOP_LOSS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTypePropEnum = append(stopLossOrderRequestTypeTypePropEnum, v)
	}
}

const (
	// StopLossOrderRequestTypeMARKET captures enum value "MARKET"
	StopLossOrderRequestTypeMARKET string = "MARKET"
	// StopLossOrderRequestTypeLIMIT captures enum value "LIMIT"
	StopLossOrderRequestTypeLIMIT string = "LIMIT"
	// StopLossOrderRequestTypeSTOP captures enum value "STOP"
	StopLossOrderRequestTypeSTOP string = "STOP"
	// StopLossOrderRequestTypeMARKETIFTOUCHED captures enum value "MARKET_IF_TOUCHED"
	StopLossOrderRequestTypeMARKETIFTOUCHED string = "MARKET_IF_TOUCHED"
	// StopLossOrderRequestTypeTAKEPROFIT captures enum value "TAKE_PROFIT"
	StopLossOrderRequestTypeTAKEPROFIT string = "TAKE_PROFIT"
	// StopLossOrderRequestTypeSTOPLOSS captures enum value "STOP_LOSS"
	StopLossOrderRequestTypeSTOPLOSS string = "STOP_LOSS"
	// StopLossOrderRequestTypeTRAILINGSTOPLOSS captures enum value "TRAILING_STOP_LOSS"
	StopLossOrderRequestTypeTRAILINGSTOPLOSS string = "TRAILING_STOP_LOSS"
)

// prop value enum
func (m *StopLossOrderRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopLossOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopLossOrderRequest) UnmarshalBinary(b []byte) error {
	var res StopLossOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
