// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Position The specification of a Position within an Account.
// swagger:model Position
type Position struct {

	// The total amount of commission paid for this instrument over the lifetime of the Account. Represented in the Account's home currency.
	Commission string `json:"commission,omitempty"`

	// The Position's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// long
	Long *PositionSide `json:"long,omitempty"`

	// Profit/loss realized by the Position over the lifetime of the Account.
	Pl string `json:"pl,omitempty"`

	// Profit/loss realized by the Position since the Account's resettablePL was last reset by the client.
	ResettablePL string `json:"resettablePL,omitempty"`

	// short
	Short *PositionSide `json:"short,omitempty"`

	// The unrealized profit/loss of all open Trades that contribute to this Position.
	UnrealizedPL string `json:"unrealizedPL,omitempty"`
}

// Validate validates this position
func (m *Position) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLong(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Position) validateLong(formats strfmt.Registry) error {

	if swag.IsZero(m.Long) { // not required
		return nil
	}

	if m.Long != nil {

		if err := m.Long.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("long")
			}
			return err
		}
	}

	return nil
}

func (m *Position) validateShort(formats strfmt.Registry) error {

	if swag.IsZero(m.Short) { // not required
		return nil
	}

	if m.Short != nil {

		if err := m.Short.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("short")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Position) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Position) UnmarshalBinary(b []byte) error {
	var res Position
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
