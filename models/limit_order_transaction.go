// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LimitOrderTransaction A LimitOrderTransaction represents the creation of a Limit Order in the user's Account.
// swagger:model LimitOrderTransaction
type LimitOrderTransaction struct {

	// The ID of the Account the Transaction was created for.
	AccountID string `json:"accountID,omitempty"`

	// The ID of the "batch" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.
	BatchID string `json:"batchID,omitempty"`

	// The ID of the Transaction that cancels the replaced Order (only provided if this Order replaces an existing Order).
	CancellingTransactionID string `json:"cancellingTransactionID,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The date/time when the Limit Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// The Transaction's Identifier.
	ID string `json:"id,omitempty"`

	// The Limit Order's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// Specification of how Positions in the Account are modified when the Order is filled.
	PositionFill string `json:"positionFill,omitempty"`

	// The price threshold specified for the Limit Order. The Limit Order will only be filled by a market price that is equal to or better than this price.
	Price string `json:"price,omitempty"`

	// The reason that the Limit Order was initiated
	Reason string `json:"reason,omitempty"`

	// The ID of the Order that this Order replaces (only provided if this Order replaces an existing Order).
	ReplacesOrderID string `json:"replacesOrderID,omitempty"`

	// The Request ID of the request which generated the transaction.
	RequestID string `json:"requestID,omitempty"`

	// stop loss on fill
	StopLossOnFill *StopLossDetails `json:"stopLossOnFill,omitempty"`

	// take profit on fill
	TakeProfitOnFill *TakeProfitDetails `json:"takeProfitOnFill,omitempty"`

	// The date/time when the Transaction was created.
	Time string `json:"time,omitempty"`

	// The time-in-force requested for the Limit Order.
	TimeInForce string `json:"timeInForce,omitempty"`

	// trade client extensions
	TradeClientExtensions *ClientExtensions `json:"tradeClientExtensions,omitempty"`

	// trailing stop loss on fill
	TrailingStopLossOnFill *TrailingStopLossDetails `json:"trailingStopLossOnFill,omitempty"`

	// Specification of what component of a price should be used for comparison when determining if the Order should be filled.
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The Type of the Transaction. Always set to "LIMIT_ORDER" in a LimitOrderTransaction.
	Type string `json:"type,omitempty"`

	// The quantity requested to be filled by the Limit Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.
	Units string `json:"units,omitempty"`

	// The ID of the user that initiated the creation of the Transaction.
	UserID int64 `json:"userID,omitempty"`
}

// Validate validates this limit order transaction
func (m *LimitOrderTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePositionFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LimitOrderTransaction) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var limitOrderTransactionTypePositionFillPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN_ONLY","REDUCE_FIRST","REDUCE_ONLY","DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitOrderTransactionTypePositionFillPropEnum = append(limitOrderTransactionTypePositionFillPropEnum, v)
	}
}

const (
	// LimitOrderTransactionPositionFillOPENONLY captures enum value "OPEN_ONLY"
	LimitOrderTransactionPositionFillOPENONLY string = "OPEN_ONLY"
	// LimitOrderTransactionPositionFillREDUCEFIRST captures enum value "REDUCE_FIRST"
	LimitOrderTransactionPositionFillREDUCEFIRST string = "REDUCE_FIRST"
	// LimitOrderTransactionPositionFillREDUCEONLY captures enum value "REDUCE_ONLY"
	LimitOrderTransactionPositionFillREDUCEONLY string = "REDUCE_ONLY"
	// LimitOrderTransactionPositionFillDEFAULT captures enum value "DEFAULT"
	LimitOrderTransactionPositionFillDEFAULT string = "DEFAULT"
)

// prop value enum
func (m *LimitOrderTransaction) validatePositionFillEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, limitOrderTransactionTypePositionFillPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitOrderTransaction) validatePositionFill(formats strfmt.Registry) error {

	if swag.IsZero(m.PositionFill) { // not required
		return nil
	}

	// value enum
	if err := m.validatePositionFillEnum("positionFill", "body", m.PositionFill); err != nil {
		return err
	}

	return nil
}

var limitOrderTransactionTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLIENT_ORDER","REPLACEMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitOrderTransactionTypeReasonPropEnum = append(limitOrderTransactionTypeReasonPropEnum, v)
	}
}

const (
	// LimitOrderTransactionReasonCLIENTORDER captures enum value "CLIENT_ORDER"
	LimitOrderTransactionReasonCLIENTORDER string = "CLIENT_ORDER"
	// LimitOrderTransactionReasonREPLACEMENT captures enum value "REPLACEMENT"
	LimitOrderTransactionReasonREPLACEMENT string = "REPLACEMENT"
)

// prop value enum
func (m *LimitOrderTransaction) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, limitOrderTransactionTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitOrderTransaction) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *LimitOrderTransaction) validateStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOnFill) { // not required
		return nil
	}

	if m.StopLossOnFill != nil {

		if err := m.StopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOnFill")
			}
			return err
		}
	}

	return nil
}

func (m *LimitOrderTransaction) validateTakeProfitOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOnFill) { // not required
		return nil
	}

	if m.TakeProfitOnFill != nil {

		if err := m.TakeProfitOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOnFill")
			}
			return err
		}
	}

	return nil
}

var limitOrderTransactionTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitOrderTransactionTypeTimeInForcePropEnum = append(limitOrderTransactionTypeTimeInForcePropEnum, v)
	}
}

const (
	// LimitOrderTransactionTimeInForceGTC captures enum value "GTC"
	LimitOrderTransactionTimeInForceGTC string = "GTC"
	// LimitOrderTransactionTimeInForceGTD captures enum value "GTD"
	LimitOrderTransactionTimeInForceGTD string = "GTD"
	// LimitOrderTransactionTimeInForceGFD captures enum value "GFD"
	LimitOrderTransactionTimeInForceGFD string = "GFD"
	// LimitOrderTransactionTimeInForceFOK captures enum value "FOK"
	LimitOrderTransactionTimeInForceFOK string = "FOK"
	// LimitOrderTransactionTimeInForceIOC captures enum value "IOC"
	LimitOrderTransactionTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *LimitOrderTransaction) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, limitOrderTransactionTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitOrderTransaction) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

func (m *LimitOrderTransaction) validateTradeClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClientExtensions) { // not required
		return nil
	}

	if m.TradeClientExtensions != nil {

		if err := m.TradeClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradeClientExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *LimitOrderTransaction) validateTrailingStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOnFill) { // not required
		return nil
	}

	if m.TrailingStopLossOnFill != nil {

		if err := m.TrailingStopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOnFill")
			}
			return err
		}
	}

	return nil
}

var limitOrderTransactionTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitOrderTransactionTypeTriggerConditionPropEnum = append(limitOrderTransactionTypeTriggerConditionPropEnum, v)
	}
}

const (
	// LimitOrderTransactionTriggerConditionDEFAULT captures enum value "DEFAULT"
	LimitOrderTransactionTriggerConditionDEFAULT string = "DEFAULT"
	// LimitOrderTransactionTriggerConditionINVERSE captures enum value "INVERSE"
	LimitOrderTransactionTriggerConditionINVERSE string = "INVERSE"
	// LimitOrderTransactionTriggerConditionBID captures enum value "BID"
	LimitOrderTransactionTriggerConditionBID string = "BID"
	// LimitOrderTransactionTriggerConditionASK captures enum value "ASK"
	LimitOrderTransactionTriggerConditionASK string = "ASK"
	// LimitOrderTransactionTriggerConditionMID captures enum value "MID"
	LimitOrderTransactionTriggerConditionMID string = "MID"
)

// prop value enum
func (m *LimitOrderTransaction) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, limitOrderTransactionTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitOrderTransaction) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var limitOrderTransactionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","CLOSE","REOPEN","CLIENT_CONFIGURE","CLIENT_CONFIGURE_REJECT","TRANSFER_FUNDS","TRANSFER_FUNDS_REJECT","MARKET_ORDER","MARKET_ORDER_REJECT","LIMIT_ORDER","LIMIT_ORDER_REJECT","STOP_ORDER","STOP_ORDER_REJECT","MARKET_IF_TOUCHED_ORDER","MARKET_IF_TOUCHED_ORDER_REJECT","TAKE_PROFIT_ORDER","TAKE_PROFIT_ORDER_REJECT","STOP_LOSS_ORDER","STOP_LOSS_ORDER_REJECT","TRAILING_STOP_LOSS_ORDER","TRAILING_STOP_LOSS_ORDER_REJECT","ORDER_FILL","ORDER_CANCEL","ORDER_CANCEL_REJECT","ORDER_CLIENT_EXTENSIONS_MODIFY","ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT","TRADE_CLIENT_EXTENSIONS_MODIFY","TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT","MARGIN_CALL_ENTER","MARGIN_CALL_EXTEND","MARGIN_CALL_EXIT","DELAYED_TRADE_CLOSURE","DAILY_FINANCING","RESET_RESETTABLE_PL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		limitOrderTransactionTypeTypePropEnum = append(limitOrderTransactionTypeTypePropEnum, v)
	}
}

const (
	// LimitOrderTransactionTypeCREATE captures enum value "CREATE"
	LimitOrderTransactionTypeCREATE string = "CREATE"
	// LimitOrderTransactionTypeCLOSE captures enum value "CLOSE"
	LimitOrderTransactionTypeCLOSE string = "CLOSE"
	// LimitOrderTransactionTypeREOPEN captures enum value "REOPEN"
	LimitOrderTransactionTypeREOPEN string = "REOPEN"
	// LimitOrderTransactionTypeCLIENTCONFIGURE captures enum value "CLIENT_CONFIGURE"
	LimitOrderTransactionTypeCLIENTCONFIGURE string = "CLIENT_CONFIGURE"
	// LimitOrderTransactionTypeCLIENTCONFIGUREREJECT captures enum value "CLIENT_CONFIGURE_REJECT"
	LimitOrderTransactionTypeCLIENTCONFIGUREREJECT string = "CLIENT_CONFIGURE_REJECT"
	// LimitOrderTransactionTypeTRANSFERFUNDS captures enum value "TRANSFER_FUNDS"
	LimitOrderTransactionTypeTRANSFERFUNDS string = "TRANSFER_FUNDS"
	// LimitOrderTransactionTypeTRANSFERFUNDSREJECT captures enum value "TRANSFER_FUNDS_REJECT"
	LimitOrderTransactionTypeTRANSFERFUNDSREJECT string = "TRANSFER_FUNDS_REJECT"
	// LimitOrderTransactionTypeMARKETORDER captures enum value "MARKET_ORDER"
	LimitOrderTransactionTypeMARKETORDER string = "MARKET_ORDER"
	// LimitOrderTransactionTypeMARKETORDERREJECT captures enum value "MARKET_ORDER_REJECT"
	LimitOrderTransactionTypeMARKETORDERREJECT string = "MARKET_ORDER_REJECT"
	// LimitOrderTransactionTypeLIMITORDER captures enum value "LIMIT_ORDER"
	LimitOrderTransactionTypeLIMITORDER string = "LIMIT_ORDER"
	// LimitOrderTransactionTypeLIMITORDERREJECT captures enum value "LIMIT_ORDER_REJECT"
	LimitOrderTransactionTypeLIMITORDERREJECT string = "LIMIT_ORDER_REJECT"
	// LimitOrderTransactionTypeSTOPORDER captures enum value "STOP_ORDER"
	LimitOrderTransactionTypeSTOPORDER string = "STOP_ORDER"
	// LimitOrderTransactionTypeSTOPORDERREJECT captures enum value "STOP_ORDER_REJECT"
	LimitOrderTransactionTypeSTOPORDERREJECT string = "STOP_ORDER_REJECT"
	// LimitOrderTransactionTypeMARKETIFTOUCHEDORDER captures enum value "MARKET_IF_TOUCHED_ORDER"
	LimitOrderTransactionTypeMARKETIFTOUCHEDORDER string = "MARKET_IF_TOUCHED_ORDER"
	// LimitOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT captures enum value "MARKET_IF_TOUCHED_ORDER_REJECT"
	LimitOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT string = "MARKET_IF_TOUCHED_ORDER_REJECT"
	// LimitOrderTransactionTypeTAKEPROFITORDER captures enum value "TAKE_PROFIT_ORDER"
	LimitOrderTransactionTypeTAKEPROFITORDER string = "TAKE_PROFIT_ORDER"
	// LimitOrderTransactionTypeTAKEPROFITORDERREJECT captures enum value "TAKE_PROFIT_ORDER_REJECT"
	LimitOrderTransactionTypeTAKEPROFITORDERREJECT string = "TAKE_PROFIT_ORDER_REJECT"
	// LimitOrderTransactionTypeSTOPLOSSORDER captures enum value "STOP_LOSS_ORDER"
	LimitOrderTransactionTypeSTOPLOSSORDER string = "STOP_LOSS_ORDER"
	// LimitOrderTransactionTypeSTOPLOSSORDERREJECT captures enum value "STOP_LOSS_ORDER_REJECT"
	LimitOrderTransactionTypeSTOPLOSSORDERREJECT string = "STOP_LOSS_ORDER_REJECT"
	// LimitOrderTransactionTypeTRAILINGSTOPLOSSORDER captures enum value "TRAILING_STOP_LOSS_ORDER"
	LimitOrderTransactionTypeTRAILINGSTOPLOSSORDER string = "TRAILING_STOP_LOSS_ORDER"
	// LimitOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT captures enum value "TRAILING_STOP_LOSS_ORDER_REJECT"
	LimitOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT string = "TRAILING_STOP_LOSS_ORDER_REJECT"
	// LimitOrderTransactionTypeORDERFILL captures enum value "ORDER_FILL"
	LimitOrderTransactionTypeORDERFILL string = "ORDER_FILL"
	// LimitOrderTransactionTypeORDERCANCEL captures enum value "ORDER_CANCEL"
	LimitOrderTransactionTypeORDERCANCEL string = "ORDER_CANCEL"
	// LimitOrderTransactionTypeORDERCANCELREJECT captures enum value "ORDER_CANCEL_REJECT"
	LimitOrderTransactionTypeORDERCANCELREJECT string = "ORDER_CANCEL_REJECT"
	// LimitOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY"
	LimitOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY string = "ORDER_CLIENT_EXTENSIONS_MODIFY"
	// LimitOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	LimitOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT string = "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// LimitOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY"
	LimitOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY string = "TRADE_CLIENT_EXTENSIONS_MODIFY"
	// LimitOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	LimitOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT string = "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// LimitOrderTransactionTypeMARGINCALLENTER captures enum value "MARGIN_CALL_ENTER"
	LimitOrderTransactionTypeMARGINCALLENTER string = "MARGIN_CALL_ENTER"
	// LimitOrderTransactionTypeMARGINCALLEXTEND captures enum value "MARGIN_CALL_EXTEND"
	LimitOrderTransactionTypeMARGINCALLEXTEND string = "MARGIN_CALL_EXTEND"
	// LimitOrderTransactionTypeMARGINCALLEXIT captures enum value "MARGIN_CALL_EXIT"
	LimitOrderTransactionTypeMARGINCALLEXIT string = "MARGIN_CALL_EXIT"
	// LimitOrderTransactionTypeDELAYEDTRADECLOSURE captures enum value "DELAYED_TRADE_CLOSURE"
	LimitOrderTransactionTypeDELAYEDTRADECLOSURE string = "DELAYED_TRADE_CLOSURE"
	// LimitOrderTransactionTypeDAILYFINANCING captures enum value "DAILY_FINANCING"
	LimitOrderTransactionTypeDAILYFINANCING string = "DAILY_FINANCING"
	// LimitOrderTransactionTypeRESETRESETTABLEPL captures enum value "RESET_RESETTABLE_PL"
	LimitOrderTransactionTypeRESETRESETTABLEPL string = "RESET_RESETTABLE_PL"
)

// prop value enum
func (m *LimitOrderTransaction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, limitOrderTransactionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LimitOrderTransaction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LimitOrderTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LimitOrderTransaction) UnmarshalBinary(b []byte) error {
	var res LimitOrderTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
