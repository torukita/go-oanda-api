// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Price The specification of an Account-specific Price.
// swagger:model Price
type Price struct {

	// asks
	Asks PriceAsks `json:"asks"`

	// bids
	Bids PriceBids `json:"bids"`

	// The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.
	CloseoutAsk string `json:"closeoutAsk,omitempty"`

	// The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.
	CloseoutBid string `json:"closeoutBid,omitempty"`

	// The Price's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// quote home conversion factors
	QuoteHomeConversionFactors *QuoteHomeConversionFactors `json:"quoteHomeConversionFactors,omitempty"`

	// The status of the Price.
	Status string `json:"status,omitempty"`

	// The date/time when the Price was created
	Time string `json:"time,omitempty"`

	// Flag indicating if the Price is tradeable or not
	Tradeable bool `json:"tradeable,omitempty"`

	// The string "PRICE". Used to identify the a Price object when found in a stream.
	Type string `json:"type,omitempty"`

	// units available
	UnitsAvailable *UnitsAvailable `json:"unitsAvailable,omitempty"`
}

// Validate validates this price
func (m *Price) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuoteHomeConversionFactors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnitsAvailable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Price) validateQuoteHomeConversionFactors(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteHomeConversionFactors) { // not required
		return nil
	}

	if m.QuoteHomeConversionFactors != nil {

		if err := m.QuoteHomeConversionFactors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quoteHomeConversionFactors")
			}
			return err
		}
	}

	return nil
}

var priceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tradeable","non-tradeable","invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceTypeStatusPropEnum = append(priceTypeStatusPropEnum, v)
	}
}

const (
	// PriceStatusTradeable captures enum value "tradeable"
	PriceStatusTradeable string = "tradeable"
	// PriceStatusNonTradeable captures enum value "non-tradeable"
	PriceStatusNonTradeable string = "non-tradeable"
	// PriceStatusInvalid captures enum value "invalid"
	PriceStatusInvalid string = "invalid"
)

// prop value enum
func (m *Price) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, priceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Price) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Price) validateUnitsAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitsAvailable) { // not required
		return nil
	}

	if m.UnitsAvailable != nil {

		if err := m.UnitsAvailable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitsAvailable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Price) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Price) UnmarshalBinary(b []byte) error {
	var res Price
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
