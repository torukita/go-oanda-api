// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SetTradeDependentOrdersParamsBody set trade dependent orders params body
// swagger:model setTradeDependentOrdersParamsBody
type SetTradeDependentOrdersParamsBody struct {

	// stop loss
	StopLoss *StopLossDetails `json:"stopLoss,omitempty"`

	// take profit
	TakeProfit *TakeProfitDetails `json:"takeProfit,omitempty"`

	// trailing stop loss
	TrailingStopLoss *TrailingStopLossDetails `json:"trailingStopLoss,omitempty"`
}

// Validate validates this set trade dependent orders params body
func (m *SetTradeDependentOrdersParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStopLoss(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLoss(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetTradeDependentOrdersParamsBody) validateStopLoss(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLoss) { // not required
		return nil
	}

	if m.StopLoss != nil {

		if err := m.StopLoss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLoss")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersParamsBody) validateTakeProfit(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfit) { // not required
		return nil
	}

	if m.TakeProfit != nil {

		if err := m.TakeProfit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfit")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersParamsBody) validateTrailingStopLoss(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLoss) { // not required
		return nil
	}

	if m.TrailingStopLoss != nil {

		if err := m.TrailingStopLoss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLoss")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetTradeDependentOrdersParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetTradeDependentOrdersParamsBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
