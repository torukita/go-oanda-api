// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// FundingReason The reason that an Account is being funded.
// swagger:model FundingReason
type FundingReason string

const (
	// FundingReasonCLIENTFUNDING captures enum value "CLIENT_FUNDING"
	FundingReasonCLIENTFUNDING FundingReason = "CLIENT_FUNDING"
	// FundingReasonACCOUNTTRANSFER captures enum value "ACCOUNT_TRANSFER"
	FundingReasonACCOUNTTRANSFER FundingReason = "ACCOUNT_TRANSFER"
	// FundingReasonDIVISIONMIGRATION captures enum value "DIVISION_MIGRATION"
	FundingReasonDIVISIONMIGRATION FundingReason = "DIVISION_MIGRATION"
	// FundingReasonSITEMIGRATION captures enum value "SITE_MIGRATION"
	FundingReasonSITEMIGRATION FundingReason = "SITE_MIGRATION"
	// FundingReasonADJUSTMENT captures enum value "ADJUSTMENT"
	FundingReasonADJUSTMENT FundingReason = "ADJUSTMENT"
)

// for schema
var fundingReasonEnum []interface{}

func init() {
	var res []FundingReason
	if err := json.Unmarshal([]byte(`["CLIENT_FUNDING","ACCOUNT_TRANSFER","DIVISION_MIGRATION","SITE_MIGRATION","ADJUSTMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fundingReasonEnum = append(fundingReasonEnum, v)
	}
}

func (m FundingReason) validateFundingReasonEnum(path, location string, value FundingReason) error {
	if err := validate.Enum(path, location, value, fundingReasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this funding reason
func (m FundingReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFundingReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
