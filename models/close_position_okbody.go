// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClosePositionOKBody close position o k body
// swagger:model closePositionOKBody
type ClosePositionOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// long order cancel transaction
	LongOrderCancelTransaction *OrderCancelTransaction `json:"longOrderCancelTransaction,omitempty"`

	// long order create transaction
	LongOrderCreateTransaction *MarketOrderTransaction `json:"longOrderCreateTransaction,omitempty"`

	// long order fill transaction
	LongOrderFillTransaction *OrderFillTransaction `json:"longOrderFillTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// short order cancel transaction
	ShortOrderCancelTransaction *OrderCancelTransaction `json:"shortOrderCancelTransaction,omitempty"`

	// short order create transaction
	ShortOrderCreateTransaction *MarketOrderTransaction `json:"shortOrderCreateTransaction,omitempty"`

	// short order fill transaction
	ShortOrderFillTransaction *OrderFillTransaction `json:"shortOrderFillTransaction,omitempty"`
}

// Validate validates this close position o k body
func (m *ClosePositionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLongOrderCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLongOrderCreateTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLongOrderFillTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedTransactionIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortOrderCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortOrderCreateTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortOrderFillTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClosePositionOKBody) validateLongOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.LongOrderCancelTransaction) { // not required
		return nil
	}

	if m.LongOrderCancelTransaction != nil {

		if err := m.LongOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("longOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *ClosePositionOKBody) validateLongOrderCreateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.LongOrderCreateTransaction) { // not required
		return nil
	}

	if m.LongOrderCreateTransaction != nil {

		if err := m.LongOrderCreateTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("longOrderCreateTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *ClosePositionOKBody) validateLongOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.LongOrderFillTransaction) { // not required
		return nil
	}

	if m.LongOrderFillTransaction != nil {

		if err := m.LongOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("longOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *ClosePositionOKBody) validateRelatedTransactionIds(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedTransactionIds) { // not required
		return nil
	}

	return nil
}

func (m *ClosePositionOKBody) validateShortOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortOrderCancelTransaction) { // not required
		return nil
	}

	if m.ShortOrderCancelTransaction != nil {

		if err := m.ShortOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *ClosePositionOKBody) validateShortOrderCreateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortOrderCreateTransaction) { // not required
		return nil
	}

	if m.ShortOrderCreateTransaction != nil {

		if err := m.ShortOrderCreateTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortOrderCreateTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *ClosePositionOKBody) validateShortOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortOrderFillTransaction) { // not required
		return nil
	}

	if m.ShortOrderFillTransaction != nil {

		if err := m.ShortOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClosePositionOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClosePositionOKBody) UnmarshalBinary(b []byte) error {
	var res ClosePositionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
