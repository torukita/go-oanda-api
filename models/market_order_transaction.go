// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketOrderTransaction A MarketOrderTransaction represents the creation of a Market Order in the user's account. A Market Order is an Order that is filled immediately at the current market price.
// Market Orders can be specialized when they are created to accomplish a specific task: to close a Trade, to closeout a Position or to particiate in in a Margin closeout.
// swagger:model MarketOrderTransaction
type MarketOrderTransaction struct {

	// The ID of the Account the Transaction was created for.
	AccountID string `json:"accountID,omitempty"`

	// The ID of the "batch" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.
	BatchID string `json:"batchID,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// delayed trade close
	DelayedTradeClose *MarketOrderDelayedTradeClose `json:"delayedTradeClose,omitempty"`

	// The Transaction's Identifier.
	ID string `json:"id,omitempty"`

	// The Market Order's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// long position closeout
	LongPositionCloseout *MarketOrderPositionCloseout `json:"longPositionCloseout,omitempty"`

	// margin closeout
	MarginCloseout *MarketOrderMarginCloseout `json:"marginCloseout,omitempty"`

	// Specification of how Positions in the Account are modified when the Order is filled.
	PositionFill string `json:"positionFill,omitempty"`

	// The worst price that the client is willing to have the Market Order filled at.
	PriceBound string `json:"priceBound,omitempty"`

	// The reason that the Market Order was created
	Reason string `json:"reason,omitempty"`

	// The Request ID of the request which generated the transaction.
	RequestID string `json:"requestID,omitempty"`

	// short position closeout
	ShortPositionCloseout *MarketOrderPositionCloseout `json:"shortPositionCloseout,omitempty"`

	// stop loss on fill
	StopLossOnFill *StopLossDetails `json:"stopLossOnFill,omitempty"`

	// take profit on fill
	TakeProfitOnFill *TakeProfitDetails `json:"takeProfitOnFill,omitempty"`

	// The date/time when the Transaction was created.
	Time string `json:"time,omitempty"`

	// The time-in-force requested for the Market Order. Restricted to FOK or IOC for a MarketOrder.
	TimeInForce string `json:"timeInForce,omitempty"`

	// trade client extensions
	TradeClientExtensions *ClientExtensions `json:"tradeClientExtensions,omitempty"`

	// trade close
	TradeClose *MarketOrderTradeClose `json:"tradeClose,omitempty"`

	// trailing stop loss on fill
	TrailingStopLossOnFill *TrailingStopLossDetails `json:"trailingStopLossOnFill,omitempty"`

	// The Type of the Transaction. Always set to "MARKET_ORDER" in a MarketOrderTransaction.
	Type string `json:"type,omitempty"`

	// The quantity requested to be filled by the Market Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.
	Units string `json:"units,omitempty"`

	// The ID of the user that initiated the creation of the Transaction.
	UserID int64 `json:"userID,omitempty"`
}

// Validate validates this market order transaction
func (m *MarketOrderTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDelayedTradeClose(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLongPositionCloseout(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMarginCloseout(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePositionFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortPositionCloseout(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClose(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketOrderTransaction) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateDelayedTradeClose(formats strfmt.Registry) error {

	if swag.IsZero(m.DelayedTradeClose) { // not required
		return nil
	}

	if m.DelayedTradeClose != nil {

		if err := m.DelayedTradeClose.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delayedTradeClose")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateLongPositionCloseout(formats strfmt.Registry) error {

	if swag.IsZero(m.LongPositionCloseout) { // not required
		return nil
	}

	if m.LongPositionCloseout != nil {

		if err := m.LongPositionCloseout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("longPositionCloseout")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateMarginCloseout(formats strfmt.Registry) error {

	if swag.IsZero(m.MarginCloseout) { // not required
		return nil
	}

	if m.MarginCloseout != nil {

		if err := m.MarginCloseout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marginCloseout")
			}
			return err
		}
	}

	return nil
}

var marketOrderTransactionTypePositionFillPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN_ONLY","REDUCE_FIRST","REDUCE_ONLY","DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderTransactionTypePositionFillPropEnum = append(marketOrderTransactionTypePositionFillPropEnum, v)
	}
}

const (
	// MarketOrderTransactionPositionFillOPENONLY captures enum value "OPEN_ONLY"
	MarketOrderTransactionPositionFillOPENONLY string = "OPEN_ONLY"
	// MarketOrderTransactionPositionFillREDUCEFIRST captures enum value "REDUCE_FIRST"
	MarketOrderTransactionPositionFillREDUCEFIRST string = "REDUCE_FIRST"
	// MarketOrderTransactionPositionFillREDUCEONLY captures enum value "REDUCE_ONLY"
	MarketOrderTransactionPositionFillREDUCEONLY string = "REDUCE_ONLY"
	// MarketOrderTransactionPositionFillDEFAULT captures enum value "DEFAULT"
	MarketOrderTransactionPositionFillDEFAULT string = "DEFAULT"
)

// prop value enum
func (m *MarketOrderTransaction) validatePositionFillEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderTransactionTypePositionFillPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderTransaction) validatePositionFill(formats strfmt.Registry) error {

	if swag.IsZero(m.PositionFill) { // not required
		return nil
	}

	// value enum
	if err := m.validatePositionFillEnum("positionFill", "body", m.PositionFill); err != nil {
		return err
	}

	return nil
}

var marketOrderTransactionTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLIENT_ORDER","TRADE_CLOSE","POSITION_CLOSEOUT","MARGIN_CLOSEOUT","DELAYED_TRADE_CLOSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderTransactionTypeReasonPropEnum = append(marketOrderTransactionTypeReasonPropEnum, v)
	}
}

const (
	// MarketOrderTransactionReasonCLIENTORDER captures enum value "CLIENT_ORDER"
	MarketOrderTransactionReasonCLIENTORDER string = "CLIENT_ORDER"
	// MarketOrderTransactionReasonTRADECLOSE captures enum value "TRADE_CLOSE"
	MarketOrderTransactionReasonTRADECLOSE string = "TRADE_CLOSE"
	// MarketOrderTransactionReasonPOSITIONCLOSEOUT captures enum value "POSITION_CLOSEOUT"
	MarketOrderTransactionReasonPOSITIONCLOSEOUT string = "POSITION_CLOSEOUT"
	// MarketOrderTransactionReasonMARGINCLOSEOUT captures enum value "MARGIN_CLOSEOUT"
	MarketOrderTransactionReasonMARGINCLOSEOUT string = "MARGIN_CLOSEOUT"
	// MarketOrderTransactionReasonDELAYEDTRADECLOSE captures enum value "DELAYED_TRADE_CLOSE"
	MarketOrderTransactionReasonDELAYEDTRADECLOSE string = "DELAYED_TRADE_CLOSE"
)

// prop value enum
func (m *MarketOrderTransaction) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderTransactionTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderTransaction) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *MarketOrderTransaction) validateShortPositionCloseout(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortPositionCloseout) { // not required
		return nil
	}

	if m.ShortPositionCloseout != nil {

		if err := m.ShortPositionCloseout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortPositionCloseout")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOnFill) { // not required
		return nil
	}

	if m.StopLossOnFill != nil {

		if err := m.StopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOnFill")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateTakeProfitOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOnFill) { // not required
		return nil
	}

	if m.TakeProfitOnFill != nil {

		if err := m.TakeProfitOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOnFill")
			}
			return err
		}
	}

	return nil
}

var marketOrderTransactionTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderTransactionTypeTimeInForcePropEnum = append(marketOrderTransactionTypeTimeInForcePropEnum, v)
	}
}

const (
	// MarketOrderTransactionTimeInForceGTC captures enum value "GTC"
	MarketOrderTransactionTimeInForceGTC string = "GTC"
	// MarketOrderTransactionTimeInForceGTD captures enum value "GTD"
	MarketOrderTransactionTimeInForceGTD string = "GTD"
	// MarketOrderTransactionTimeInForceGFD captures enum value "GFD"
	MarketOrderTransactionTimeInForceGFD string = "GFD"
	// MarketOrderTransactionTimeInForceFOK captures enum value "FOK"
	MarketOrderTransactionTimeInForceFOK string = "FOK"
	// MarketOrderTransactionTimeInForceIOC captures enum value "IOC"
	MarketOrderTransactionTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *MarketOrderTransaction) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderTransactionTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderTransaction) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

func (m *MarketOrderTransaction) validateTradeClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClientExtensions) { // not required
		return nil
	}

	if m.TradeClientExtensions != nil {

		if err := m.TradeClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradeClientExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateTradeClose(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClose) { // not required
		return nil
	}

	if m.TradeClose != nil {

		if err := m.TradeClose.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradeClose")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderTransaction) validateTrailingStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOnFill) { // not required
		return nil
	}

	if m.TrailingStopLossOnFill != nil {

		if err := m.TrailingStopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOnFill")
			}
			return err
		}
	}

	return nil
}

var marketOrderTransactionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","CLOSE","REOPEN","CLIENT_CONFIGURE","CLIENT_CONFIGURE_REJECT","TRANSFER_FUNDS","TRANSFER_FUNDS_REJECT","MARKET_ORDER","MARKET_ORDER_REJECT","LIMIT_ORDER","LIMIT_ORDER_REJECT","STOP_ORDER","STOP_ORDER_REJECT","MARKET_IF_TOUCHED_ORDER","MARKET_IF_TOUCHED_ORDER_REJECT","TAKE_PROFIT_ORDER","TAKE_PROFIT_ORDER_REJECT","STOP_LOSS_ORDER","STOP_LOSS_ORDER_REJECT","TRAILING_STOP_LOSS_ORDER","TRAILING_STOP_LOSS_ORDER_REJECT","ORDER_FILL","ORDER_CANCEL","ORDER_CANCEL_REJECT","ORDER_CLIENT_EXTENSIONS_MODIFY","ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT","TRADE_CLIENT_EXTENSIONS_MODIFY","TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT","MARGIN_CALL_ENTER","MARGIN_CALL_EXTEND","MARGIN_CALL_EXIT","DELAYED_TRADE_CLOSURE","DAILY_FINANCING","RESET_RESETTABLE_PL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderTransactionTypeTypePropEnum = append(marketOrderTransactionTypeTypePropEnum, v)
	}
}

const (
	// MarketOrderTransactionTypeCREATE captures enum value "CREATE"
	MarketOrderTransactionTypeCREATE string = "CREATE"
	// MarketOrderTransactionTypeCLOSE captures enum value "CLOSE"
	MarketOrderTransactionTypeCLOSE string = "CLOSE"
	// MarketOrderTransactionTypeREOPEN captures enum value "REOPEN"
	MarketOrderTransactionTypeREOPEN string = "REOPEN"
	// MarketOrderTransactionTypeCLIENTCONFIGURE captures enum value "CLIENT_CONFIGURE"
	MarketOrderTransactionTypeCLIENTCONFIGURE string = "CLIENT_CONFIGURE"
	// MarketOrderTransactionTypeCLIENTCONFIGUREREJECT captures enum value "CLIENT_CONFIGURE_REJECT"
	MarketOrderTransactionTypeCLIENTCONFIGUREREJECT string = "CLIENT_CONFIGURE_REJECT"
	// MarketOrderTransactionTypeTRANSFERFUNDS captures enum value "TRANSFER_FUNDS"
	MarketOrderTransactionTypeTRANSFERFUNDS string = "TRANSFER_FUNDS"
	// MarketOrderTransactionTypeTRANSFERFUNDSREJECT captures enum value "TRANSFER_FUNDS_REJECT"
	MarketOrderTransactionTypeTRANSFERFUNDSREJECT string = "TRANSFER_FUNDS_REJECT"
	// MarketOrderTransactionTypeMARKETORDER captures enum value "MARKET_ORDER"
	MarketOrderTransactionTypeMARKETORDER string = "MARKET_ORDER"
	// MarketOrderTransactionTypeMARKETORDERREJECT captures enum value "MARKET_ORDER_REJECT"
	MarketOrderTransactionTypeMARKETORDERREJECT string = "MARKET_ORDER_REJECT"
	// MarketOrderTransactionTypeLIMITORDER captures enum value "LIMIT_ORDER"
	MarketOrderTransactionTypeLIMITORDER string = "LIMIT_ORDER"
	// MarketOrderTransactionTypeLIMITORDERREJECT captures enum value "LIMIT_ORDER_REJECT"
	MarketOrderTransactionTypeLIMITORDERREJECT string = "LIMIT_ORDER_REJECT"
	// MarketOrderTransactionTypeSTOPORDER captures enum value "STOP_ORDER"
	MarketOrderTransactionTypeSTOPORDER string = "STOP_ORDER"
	// MarketOrderTransactionTypeSTOPORDERREJECT captures enum value "STOP_ORDER_REJECT"
	MarketOrderTransactionTypeSTOPORDERREJECT string = "STOP_ORDER_REJECT"
	// MarketOrderTransactionTypeMARKETIFTOUCHEDORDER captures enum value "MARKET_IF_TOUCHED_ORDER"
	MarketOrderTransactionTypeMARKETIFTOUCHEDORDER string = "MARKET_IF_TOUCHED_ORDER"
	// MarketOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT captures enum value "MARKET_IF_TOUCHED_ORDER_REJECT"
	MarketOrderTransactionTypeMARKETIFTOUCHEDORDERREJECT string = "MARKET_IF_TOUCHED_ORDER_REJECT"
	// MarketOrderTransactionTypeTAKEPROFITORDER captures enum value "TAKE_PROFIT_ORDER"
	MarketOrderTransactionTypeTAKEPROFITORDER string = "TAKE_PROFIT_ORDER"
	// MarketOrderTransactionTypeTAKEPROFITORDERREJECT captures enum value "TAKE_PROFIT_ORDER_REJECT"
	MarketOrderTransactionTypeTAKEPROFITORDERREJECT string = "TAKE_PROFIT_ORDER_REJECT"
	// MarketOrderTransactionTypeSTOPLOSSORDER captures enum value "STOP_LOSS_ORDER"
	MarketOrderTransactionTypeSTOPLOSSORDER string = "STOP_LOSS_ORDER"
	// MarketOrderTransactionTypeSTOPLOSSORDERREJECT captures enum value "STOP_LOSS_ORDER_REJECT"
	MarketOrderTransactionTypeSTOPLOSSORDERREJECT string = "STOP_LOSS_ORDER_REJECT"
	// MarketOrderTransactionTypeTRAILINGSTOPLOSSORDER captures enum value "TRAILING_STOP_LOSS_ORDER"
	MarketOrderTransactionTypeTRAILINGSTOPLOSSORDER string = "TRAILING_STOP_LOSS_ORDER"
	// MarketOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT captures enum value "TRAILING_STOP_LOSS_ORDER_REJECT"
	MarketOrderTransactionTypeTRAILINGSTOPLOSSORDERREJECT string = "TRAILING_STOP_LOSS_ORDER_REJECT"
	// MarketOrderTransactionTypeORDERFILL captures enum value "ORDER_FILL"
	MarketOrderTransactionTypeORDERFILL string = "ORDER_FILL"
	// MarketOrderTransactionTypeORDERCANCEL captures enum value "ORDER_CANCEL"
	MarketOrderTransactionTypeORDERCANCEL string = "ORDER_CANCEL"
	// MarketOrderTransactionTypeORDERCANCELREJECT captures enum value "ORDER_CANCEL_REJECT"
	MarketOrderTransactionTypeORDERCANCELREJECT string = "ORDER_CANCEL_REJECT"
	// MarketOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY"
	MarketOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFY string = "ORDER_CLIENT_EXTENSIONS_MODIFY"
	// MarketOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT captures enum value "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	MarketOrderTransactionTypeORDERCLIENTEXTENSIONSMODIFYREJECT string = "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// MarketOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY"
	MarketOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFY string = "TRADE_CLIENT_EXTENSIONS_MODIFY"
	// MarketOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT captures enum value "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	MarketOrderTransactionTypeTRADECLIENTEXTENSIONSMODIFYREJECT string = "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT"
	// MarketOrderTransactionTypeMARGINCALLENTER captures enum value "MARGIN_CALL_ENTER"
	MarketOrderTransactionTypeMARGINCALLENTER string = "MARGIN_CALL_ENTER"
	// MarketOrderTransactionTypeMARGINCALLEXTEND captures enum value "MARGIN_CALL_EXTEND"
	MarketOrderTransactionTypeMARGINCALLEXTEND string = "MARGIN_CALL_EXTEND"
	// MarketOrderTransactionTypeMARGINCALLEXIT captures enum value "MARGIN_CALL_EXIT"
	MarketOrderTransactionTypeMARGINCALLEXIT string = "MARGIN_CALL_EXIT"
	// MarketOrderTransactionTypeDELAYEDTRADECLOSURE captures enum value "DELAYED_TRADE_CLOSURE"
	MarketOrderTransactionTypeDELAYEDTRADECLOSURE string = "DELAYED_TRADE_CLOSURE"
	// MarketOrderTransactionTypeDAILYFINANCING captures enum value "DAILY_FINANCING"
	MarketOrderTransactionTypeDAILYFINANCING string = "DAILY_FINANCING"
	// MarketOrderTransactionTypeRESETRESETTABLEPL captures enum value "RESET_RESETTABLE_PL"
	MarketOrderTransactionTypeRESETRESETTABLEPL string = "RESET_RESETTABLE_PL"
)

// prop value enum
func (m *MarketOrderTransaction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderTransactionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderTransaction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketOrderTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketOrderTransaction) UnmarshalBinary(b []byte) error {
	var res MarketOrderTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
