// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trade The specification of a Trade within an Account. This includes the full representation of the Trade's dependent Orders in addition to the IDs of those Orders.
// swagger:model Trade
type Trade struct {

	// The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once.
	AverageClosePrice string `json:"averageClosePrice,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The date/time when the Trade was fully closed. Only provided for Trades whose state is CLOSED.
	CloseTime string `json:"closeTime,omitempty"`

	// The IDs of the Transactions that have closed portions of this Trade.
	ClosingTransactionIds []string `json:"closingTransactionIDs"`

	// The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.
	CurrentUnits string `json:"currentUnits,omitempty"`

	// The financing paid/collected for this Trade.
	Financing string `json:"financing,omitempty"`

	// The Trade's identifier, unique within the Trade's Account.
	ID string `json:"id,omitempty"`

	// The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.
	InitialUnits string `json:"initialUnits,omitempty"`

	// The Trade's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// The date/time when the Trade was opened.
	OpenTime string `json:"openTime,omitempty"`

	// The execution price of the Trade.
	Price string `json:"price,omitempty"`

	// The total profit/loss realized on the closed portion of the Trade.
	RealizedPL string `json:"realizedPL,omitempty"`

	// The current state of the Trade.
	State string `json:"state,omitempty"`

	// stop loss order
	StopLossOrder *StopLossOrder `json:"stopLossOrder,omitempty"`

	// take profit order
	TakeProfitOrder *TakeProfitOrder `json:"takeProfitOrder,omitempty"`

	// trailing stop loss order
	TrailingStopLossOrder *TrailingStopLossOrder `json:"trailingStopLossOrder,omitempty"`

	// The unrealized profit/loss on the open portion of the Trade.
	UnrealizedPL string `json:"unrealizedPL,omitempty"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClosingTransactionIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trade) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) validateClosingTransactionIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosingTransactionIds) { // not required
		return nil
	}

	return nil
}

var tradeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","CLOSED","CLOSE_WHEN_TRADEABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tradeTypeStatePropEnum = append(tradeTypeStatePropEnum, v)
	}
}

const (
	// TradeStateOPEN captures enum value "OPEN"
	TradeStateOPEN string = "OPEN"
	// TradeStateCLOSED captures enum value "CLOSED"
	TradeStateCLOSED string = "CLOSED"
	// TradeStateCLOSEWHENTRADEABLE captures enum value "CLOSE_WHEN_TRADEABLE"
	TradeStateCLOSEWHENTRADEABLE string = "CLOSE_WHEN_TRADEABLE"
)

// prop value enum
func (m *Trade) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tradeTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Trade) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateStopLossOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOrder) { // not required
		return nil
	}

	if m.StopLossOrder != nil {

		if err := m.StopLossOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOrder")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) validateTakeProfitOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOrder) { // not required
		return nil
	}

	if m.TakeProfitOrder != nil {

		if err := m.TakeProfitOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOrder")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) validateTrailingStopLossOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOrder) { // not required
		return nil
	}

	if m.TrailingStopLossOrder != nil {

		if err := m.TrailingStopLossOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOrder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
