// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopLossOrder A StopLossOrder is an order that is linked to an open Trade and created with a price threshold. The Order will be filled (closing the Trade) by the first price that is equal to or worse than the threshold. A StopLossOrder cannot be used to open a new Position.
// swagger:model StopLossOrder
type StopLossOrder struct {

	// Date/time when the Order was cancelled (only provided when the state of the Order is CANCELLED)
	CancelledTime string `json:"cancelledTime,omitempty"`

	// ID of the Transaction that cancelled the Order (only provided when the Order's state is CANCELLED)
	CancellingTransactionID string `json:"cancellingTransactionID,omitempty"`

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The client ID of the Trade to be closed when the price threshold is breached.
	ClientTradeID string `json:"clientTradeID,omitempty"`

	// The time when the Order was created.
	CreateTime string `json:"createTime,omitempty"`

	// Date/time when the Order was filled (only provided when the Order's state is FILLED)
	FilledTime string `json:"filledTime,omitempty"`

	// ID of the Transaction that filled this Order (only provided when the Order's state is FILLED)
	FillingTransactionID string `json:"fillingTransactionID,omitempty"`

	// The date/time when the StopLoss Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// The Order's identifier, unique within the Order's Account.
	ID string `json:"id,omitempty"`

	// The price threshold specified for the StopLoss Order. The associated Trade will be closed by a market price that is equal to or worse than this threshold.
	Price string `json:"price,omitempty"`

	// The ID of the Order that replaced this Order (only provided if this Order was cancelled as part of a cancel/replace).
	ReplacedByOrderID string `json:"replacedByOrderID,omitempty"`

	// The ID of the Order that was replaced by this Order (only provided if this Order was created as part of a cancel/replace).
	ReplacesOrderID string `json:"replacesOrderID,omitempty"`

	// The current state of the Order.
	State string `json:"state,omitempty"`

	// The time-in-force requested for the StopLoss Order. Restricted to "GTC", "GFD" and "GTD" for StopLoss Orders.
	TimeInForce string `json:"timeInForce,omitempty"`

	// Trade IDs of Trades closed when the Order was filled (only provided when the Order's state is FILLED and one or more Trades were closed as a result of the fill)
	TradeClosedIds []string `json:"tradeClosedIDs"`

	// The ID of the Trade to close when the price threshold is breached.
	TradeID string `json:"tradeID,omitempty"`

	// Trade ID of Trade opened when the Order was filled (only provided when the Order's state is FILLED and a Trade was opened as a result of the fill)
	TradeOpenedID string `json:"tradeOpenedID,omitempty"`

	// Trade ID of Trade reduced when the Order was filled (only provided when the Order's state is FILLED and a Trade was reduced as a result of the fill)
	TradeReducedID string `json:"tradeReducedID,omitempty"`

	// Specification of what component of a price should be used for comparison when determining if the Order should be filled.
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The type of the Order. Always set to "STOP_LOSS" for Stop Loss Orders.
	Type string `json:"type,omitempty"`
}

// Validate validates this stop loss order
func (m *StopLossOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClosedIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopLossOrder) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var stopLossOrderTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","FILLED","TRIGGERED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTypeStatePropEnum = append(stopLossOrderTypeStatePropEnum, v)
	}
}

const (
	// StopLossOrderStatePENDING captures enum value "PENDING"
	StopLossOrderStatePENDING string = "PENDING"
	// StopLossOrderStateFILLED captures enum value "FILLED"
	StopLossOrderStateFILLED string = "FILLED"
	// StopLossOrderStateTRIGGERED captures enum value "TRIGGERED"
	StopLossOrderStateTRIGGERED string = "TRIGGERED"
	// StopLossOrderStateCANCELLED captures enum value "CANCELLED"
	StopLossOrderStateCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *StopLossOrder) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrder) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var stopLossOrderTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTypeTimeInForcePropEnum = append(stopLossOrderTypeTimeInForcePropEnum, v)
	}
}

const (
	// StopLossOrderTimeInForceGTC captures enum value "GTC"
	StopLossOrderTimeInForceGTC string = "GTC"
	// StopLossOrderTimeInForceGTD captures enum value "GTD"
	StopLossOrderTimeInForceGTD string = "GTD"
	// StopLossOrderTimeInForceGFD captures enum value "GFD"
	StopLossOrderTimeInForceGFD string = "GFD"
	// StopLossOrderTimeInForceFOK captures enum value "FOK"
	StopLossOrderTimeInForceFOK string = "FOK"
	// StopLossOrderTimeInForceIOC captures enum value "IOC"
	StopLossOrderTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *StopLossOrder) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrder) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

func (m *StopLossOrder) validateTradeClosedIds(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClosedIds) { // not required
		return nil
	}

	return nil
}

var stopLossOrderTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTypeTriggerConditionPropEnum = append(stopLossOrderTypeTriggerConditionPropEnum, v)
	}
}

const (
	// StopLossOrderTriggerConditionDEFAULT captures enum value "DEFAULT"
	StopLossOrderTriggerConditionDEFAULT string = "DEFAULT"
	// StopLossOrderTriggerConditionINVERSE captures enum value "INVERSE"
	StopLossOrderTriggerConditionINVERSE string = "INVERSE"
	// StopLossOrderTriggerConditionBID captures enum value "BID"
	StopLossOrderTriggerConditionBID string = "BID"
	// StopLossOrderTriggerConditionASK captures enum value "ASK"
	StopLossOrderTriggerConditionASK string = "ASK"
	// StopLossOrderTriggerConditionMID captures enum value "MID"
	StopLossOrderTriggerConditionMID string = "MID"
)

// prop value enum
func (m *StopLossOrder) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrder) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var stopLossOrderTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKET","LIMIT","STOP","MARKET_IF_TOUCHED","TAKE_PROFIT","STOP_LOSS","TRAILING_STOP_LOSS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderTypeTypePropEnum = append(stopLossOrderTypeTypePropEnum, v)
	}
}

const (
	// StopLossOrderTypeMARKET captures enum value "MARKET"
	StopLossOrderTypeMARKET string = "MARKET"
	// StopLossOrderTypeLIMIT captures enum value "LIMIT"
	StopLossOrderTypeLIMIT string = "LIMIT"
	// StopLossOrderTypeSTOP captures enum value "STOP"
	StopLossOrderTypeSTOP string = "STOP"
	// StopLossOrderTypeMARKETIFTOUCHED captures enum value "MARKET_IF_TOUCHED"
	StopLossOrderTypeMARKETIFTOUCHED string = "MARKET_IF_TOUCHED"
	// StopLossOrderTypeTAKEPROFIT captures enum value "TAKE_PROFIT"
	StopLossOrderTypeTAKEPROFIT string = "TAKE_PROFIT"
	// StopLossOrderTypeSTOPLOSS captures enum value "STOP_LOSS"
	StopLossOrderTypeSTOPLOSS string = "STOP_LOSS"
	// StopLossOrderTypeTRAILINGSTOPLOSS captures enum value "TRAILING_STOP_LOSS"
	StopLossOrderTypeTRAILINGSTOPLOSS string = "TRAILING_STOP_LOSS"
)

// prop value enum
func (m *StopLossOrder) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrder) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopLossOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopLossOrder) UnmarshalBinary(b []byte) error {
	var res StopLossOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
