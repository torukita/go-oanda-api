// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketOrderRequest A MarketOrderRequest specifies the parameters that may be set when creating a Market Order.
// swagger:model MarketOrderRequest
type MarketOrderRequest struct {

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The Market Order's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// Specification of how Positions in the Account are modified when the Order is filled.
	PositionFill string `json:"positionFill,omitempty"`

	// The worst price that the client is willing to have the Market Order filled at.
	PriceBound string `json:"priceBound,omitempty"`

	// stop loss on fill
	StopLossOnFill *StopLossDetails `json:"stopLossOnFill,omitempty"`

	// take profit on fill
	TakeProfitOnFill *TakeProfitDetails `json:"takeProfitOnFill,omitempty"`

	// The time-in-force requested for the Market Order. Restricted to FOK or IOC for a MarketOrder.
	TimeInForce string `json:"timeInForce,omitempty"`

	// trade client extensions
	TradeClientExtensions *ClientExtensions `json:"tradeClientExtensions,omitempty"`

	// trailing stop loss on fill
	TrailingStopLossOnFill *TrailingStopLossDetails `json:"trailingStopLossOnFill,omitempty"`

	// The type of the Order to Create. Must be set to "MARKET" when creating a Market Order.
	Type string `json:"type,omitempty"`

	// The quantity requested to be filled by the Market Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.
	Units string `json:"units,omitempty"`
}

// Validate validates this market order request
func (m *MarketOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePositionFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTradeClientExtensions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOnFill(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketOrderRequest) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {

		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var marketOrderRequestTypePositionFillPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN_ONLY","REDUCE_FIRST","REDUCE_ONLY","DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderRequestTypePositionFillPropEnum = append(marketOrderRequestTypePositionFillPropEnum, v)
	}
}

const (
	// MarketOrderRequestPositionFillOPENONLY captures enum value "OPEN_ONLY"
	MarketOrderRequestPositionFillOPENONLY string = "OPEN_ONLY"
	// MarketOrderRequestPositionFillREDUCEFIRST captures enum value "REDUCE_FIRST"
	MarketOrderRequestPositionFillREDUCEFIRST string = "REDUCE_FIRST"
	// MarketOrderRequestPositionFillREDUCEONLY captures enum value "REDUCE_ONLY"
	MarketOrderRequestPositionFillREDUCEONLY string = "REDUCE_ONLY"
	// MarketOrderRequestPositionFillDEFAULT captures enum value "DEFAULT"
	MarketOrderRequestPositionFillDEFAULT string = "DEFAULT"
)

// prop value enum
func (m *MarketOrderRequest) validatePositionFillEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderRequestTypePositionFillPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderRequest) validatePositionFill(formats strfmt.Registry) error {

	if swag.IsZero(m.PositionFill) { // not required
		return nil
	}

	// value enum
	if err := m.validatePositionFillEnum("positionFill", "body", m.PositionFill); err != nil {
		return err
	}

	return nil
}

func (m *MarketOrderRequest) validateStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOnFill) { // not required
		return nil
	}

	if m.StopLossOnFill != nil {

		if err := m.StopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOnFill")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderRequest) validateTakeProfitOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOnFill) { // not required
		return nil
	}

	if m.TakeProfitOnFill != nil {

		if err := m.TakeProfitOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOnFill")
			}
			return err
		}
	}

	return nil
}

var marketOrderRequestTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderRequestTypeTimeInForcePropEnum = append(marketOrderRequestTypeTimeInForcePropEnum, v)
	}
}

const (
	// MarketOrderRequestTimeInForceGTC captures enum value "GTC"
	MarketOrderRequestTimeInForceGTC string = "GTC"
	// MarketOrderRequestTimeInForceGTD captures enum value "GTD"
	MarketOrderRequestTimeInForceGTD string = "GTD"
	// MarketOrderRequestTimeInForceGFD captures enum value "GFD"
	MarketOrderRequestTimeInForceGFD string = "GFD"
	// MarketOrderRequestTimeInForceFOK captures enum value "FOK"
	MarketOrderRequestTimeInForceFOK string = "FOK"
	// MarketOrderRequestTimeInForceIOC captures enum value "IOC"
	MarketOrderRequestTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *MarketOrderRequest) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderRequestTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderRequest) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

func (m *MarketOrderRequest) validateTradeClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeClientExtensions) { // not required
		return nil
	}

	if m.TradeClientExtensions != nil {

		if err := m.TradeClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tradeClientExtensions")
			}
			return err
		}
	}

	return nil
}

func (m *MarketOrderRequest) validateTrailingStopLossOnFill(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOnFill) { // not required
		return nil
	}

	if m.TrailingStopLossOnFill != nil {

		if err := m.TrailingStopLossOnFill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOnFill")
			}
			return err
		}
	}

	return nil
}

var marketOrderRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKET","LIMIT","STOP","MARKET_IF_TOUCHED","TAKE_PROFIT","STOP_LOSS","TRAILING_STOP_LOSS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketOrderRequestTypeTypePropEnum = append(marketOrderRequestTypeTypePropEnum, v)
	}
}

const (
	// MarketOrderRequestTypeMARKET captures enum value "MARKET"
	MarketOrderRequestTypeMARKET string = "MARKET"
	// MarketOrderRequestTypeLIMIT captures enum value "LIMIT"
	MarketOrderRequestTypeLIMIT string = "LIMIT"
	// MarketOrderRequestTypeSTOP captures enum value "STOP"
	MarketOrderRequestTypeSTOP string = "STOP"
	// MarketOrderRequestTypeMARKETIFTOUCHED captures enum value "MARKET_IF_TOUCHED"
	MarketOrderRequestTypeMARKETIFTOUCHED string = "MARKET_IF_TOUCHED"
	// MarketOrderRequestTypeTAKEPROFIT captures enum value "TAKE_PROFIT"
	MarketOrderRequestTypeTAKEPROFIT string = "TAKE_PROFIT"
	// MarketOrderRequestTypeSTOPLOSS captures enum value "STOP_LOSS"
	MarketOrderRequestTypeSTOPLOSS string = "STOP_LOSS"
	// MarketOrderRequestTypeTRAILINGSTOPLOSS captures enum value "TRAILING_STOP_LOSS"
	MarketOrderRequestTypeTRAILINGSTOPLOSS string = "TRAILING_STOP_LOSS"
)

// prop value enum
func (m *MarketOrderRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketOrderRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketOrderRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketOrderRequest) UnmarshalBinary(b []byte) error {
	var res MarketOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
