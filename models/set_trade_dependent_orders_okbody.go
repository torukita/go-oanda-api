// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SetTradeDependentOrdersOKBody set trade dependent orders o k body
// swagger:model setTradeDependentOrdersOKBody
type SetTradeDependentOrdersOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// stop loss order cancel transaction
	StopLossOrderCancelTransaction *OrderCancelTransaction `json:"stopLossOrderCancelTransaction,omitempty"`

	// stop loss order created cancel transaction
	StopLossOrderCreatedCancelTransaction *OrderCancelTransaction `json:"stopLossOrderCreatedCancelTransaction,omitempty"`

	// stop loss order fill transaction
	StopLossOrderFillTransaction *OrderFillTransaction `json:"stopLossOrderFillTransaction,omitempty"`

	// stop loss order transaction
	StopLossOrderTransaction *StopLossOrderTransaction `json:"stopLossOrderTransaction,omitempty"`

	// take profit order cancel transaction
	TakeProfitOrderCancelTransaction *OrderCancelTransaction `json:"takeProfitOrderCancelTransaction,omitempty"`

	// take profit order created cancel transaction
	TakeProfitOrderCreatedCancelTransaction *OrderCancelTransaction `json:"takeProfitOrderCreatedCancelTransaction,omitempty"`

	// take profit order fill transaction
	TakeProfitOrderFillTransaction *OrderFillTransaction `json:"takeProfitOrderFillTransaction,omitempty"`

	// take profit order transaction
	TakeProfitOrderTransaction *TakeProfitOrderTransaction `json:"takeProfitOrderTransaction,omitempty"`

	// trailing stop loss order cancel transaction
	TrailingStopLossOrderCancelTransaction *OrderCancelTransaction `json:"trailingStopLossOrderCancelTransaction,omitempty"`

	// trailing stop loss order transaction
	TrailingStopLossOrderTransaction *TrailingStopLossOrderTransaction `json:"trailingStopLossOrderTransaction,omitempty"`
}

// Validate validates this set trade dependent orders o k body
func (m *SetTradeDependentOrdersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelatedTransactionIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOrderCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOrderCreatedCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOrderFillTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopLossOrderTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOrderCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOrderCreatedCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOrderFillTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTakeProfitOrderTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOrderCancelTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrailingStopLossOrderTransaction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateRelatedTransactionIds(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedTransactionIds) { // not required
		return nil
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateStopLossOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOrderCancelTransaction) { // not required
		return nil
	}

	if m.StopLossOrderCancelTransaction != nil {

		if err := m.StopLossOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateStopLossOrderCreatedCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOrderCreatedCancelTransaction) { // not required
		return nil
	}

	if m.StopLossOrderCreatedCancelTransaction != nil {

		if err := m.StopLossOrderCreatedCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOrderCreatedCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateStopLossOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOrderFillTransaction) { // not required
		return nil
	}

	if m.StopLossOrderFillTransaction != nil {

		if err := m.StopLossOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateStopLossOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLossOrderTransaction) { // not required
		return nil
	}

	if m.StopLossOrderTransaction != nil {

		if err := m.StopLossOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stopLossOrderTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTakeProfitOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOrderCancelTransaction) { // not required
		return nil
	}

	if m.TakeProfitOrderCancelTransaction != nil {

		if err := m.TakeProfitOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTakeProfitOrderCreatedCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOrderCreatedCancelTransaction) { // not required
		return nil
	}

	if m.TakeProfitOrderCreatedCancelTransaction != nil {

		if err := m.TakeProfitOrderCreatedCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOrderCreatedCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTakeProfitOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOrderFillTransaction) { // not required
		return nil
	}

	if m.TakeProfitOrderFillTransaction != nil {

		if err := m.TakeProfitOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTakeProfitOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TakeProfitOrderTransaction) { // not required
		return nil
	}

	if m.TakeProfitOrderTransaction != nil {

		if err := m.TakeProfitOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("takeProfitOrderTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTrailingStopLossOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOrderCancelTransaction) { // not required
		return nil
	}

	if m.TrailingStopLossOrderCancelTransaction != nil {

		if err := m.TrailingStopLossOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (m *SetTradeDependentOrdersOKBody) validateTrailingStopLossOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.TrailingStopLossOrderTransaction) { // not required
		return nil
	}

	if m.TrailingStopLossOrderTransaction != nil {

		if err := m.TrailingStopLossOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trailingStopLossOrderTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetTradeDependentOrdersOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetTradeDependentOrdersOKBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
