// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// StreamPricingOKBody The response body for the Pricing Stream uses chunked transfer encoding.  Each chunk contains Price and/or PricingHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines.
// Heartbeats are sent every 5 seconds.
// swagger:model streamPricingOKBody
type StreamPricingOKBody struct {

	// heartbeat
	Heartbeat *PricingHeartbeat `json:"heartbeat,omitempty"`

	// price
	Price *Price `json:"price,omitempty"`
}

// Validate validates this stream pricing o k body
func (m *StreamPricingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeartbeat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamPricingOKBody) validateHeartbeat(formats strfmt.Registry) error {

	if swag.IsZero(m.Heartbeat) { // not required
		return nil
	}

	if m.Heartbeat != nil {

		if err := m.Heartbeat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("heartbeat")
			}
			return err
		}
	}

	return nil
}

func (m *StreamPricingOKBody) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {

		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StreamPricingOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamPricingOKBody) UnmarshalBinary(b []byte) error {
	var res StreamPricingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
